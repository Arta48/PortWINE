#!/bin/bash
# Author: PortWINE-Linux.ru
########################################################################
echo '
████─████─████─███─█───█─███─█──█─███
█──█─█──█─█──█──█──█───█──█──██─█─█
████─█──█─████──█──█─█─█──█──█─██─███
█────█──█─█─█───█──█████──█──█──█─█
█────████─█─█───█───█─█──███─█──█─███

'
########################################################################
[ $(id -u) = 0 ] && echo "Do not run this script as root!" && zenity --error --text "Do not run this script as root!" && exit 1
if [ "${s_install}" != "1" ] && [ ! -x "`which "zenity" 2>/dev/null`" ];then
    echo "You will need to install: zenity, and restart the port." 
    xdg-open "http://portwine-linux.ru/portwine-faq/" > /dev/null 2>&1 & exit 0
fi
########################################################################
sszen() {
zenity --progress --title="Settings..." --text="Updating parameters" --no-cancel --pulsate --auto-close --width 400 
} 
PW_START_PROGRESS_BAR ()
{
"${pw_yad}" --progress --progress-text="Start ${portname}... Please wait..." --pulsate --close-on-unfocus \
--no-buttons --undecorated --center --skip-taskbar --width=600 --wrap-width=500 &
export start_progress_yad_pid=$(echo $!)
}
PW_STOP_PROGRESS_BAR ()
{
if [ ! -z "${start_progress_yad_pid}" ] ; then
    kill "${start_progress_yad_pid}"
fi
}
########################################################################
cd "$(dirname "`readlink -f "$0"`")"
export PORT_SCRIPTS_PATH="$(pwd)"
cd "${PORT_SCRIPTS_PATH}/../../"
export PORT_WINE_PATH="$(pwd)"
read "portname" < "${PORT_WINE_PATH}/data/tmp/portname"
export portname
cd "${PORT_SCRIPTS_PATH}"
. "${PORT_SCRIPTS_PATH}/vars/${portname}_vars"
########################################################################
export PORT_WINE_TMP_PATH="${PORT_WINE_PATH}/data/tmp"
if [ ! -d "${PORT_WINE_TMP_PATH}" ]; then
	mkdir -p "${PORT_WINE_TMP_PATH}"
fi
if [ ! -d "${HOME}/.PortWINE/tmp" ]; then
	mkdir -p "${HOME}/.PortWINE/tmp"
fi
if [ ! -e "${PORT_WINE_TMP_PATH}/${portname}_loc" ]; then
	SET_LANG=`zenity --title  "Install $portname" --text "Select the language" --list --radiolist \
	--column="Set:" --column "Language:" \
	TRUE "RUS" \
	FALSE "ENG" `
	echo "${SET_LANG}" > "${PORT_WINE_TMP_PATH}/${portname}_loc"
fi
if [ "${portname}" = "PortProton" ]; then
    if [ -e "${PORT_WINE_TMP_PATH}/pw_vulkan" ]; then
        rm -f "${PORT_WINE_TMP_PATH}/pw_vulkan"
    fi
fi
########################################################################
. "${PORT_SCRIPTS_PATH}"/lang
if [ ! -e "${PORT_WINE_TMP_PATH}/${portname}_ver" ]; then
	echo "10" > "${PORT_WINE_TMP_PATH}/${portname}_ver"
fi
########################################################################
export LAUNCH_PARAMETERS=""
export pw_libs_ver="_v5"
export pw_gecko_mono_ver="_v1"
export port_on_run="${PORT_SCRIPTS_PATH}/port_on"
export WINEDIR="${PORT_WINE_PATH}"/data/dist
export WINELIB="${HOME}/.PortWINE/libs${pw_libs_ver}"
export WINE_MONO_GECKO="${HOME}/.PortWINE/mono_gecko${pw_gecko_mono_ver}"
export WINEARCH=win64
export WINEPREFIX="${PORT_WINE_PATH}/data/pfx/"
export PW_COMPAT_DATA_PATH="${PORT_WINE_PATH}/data/"
export PW_COMPAT_MEDIA_PATH="${PORT_WINE_TMP_PATH}/"
export PW_RUNTIME="$WINELIB/run.sh"
export PW_GUI_ICON_PATH="${PORT_WINE_PATH}/data/img/gui"
########################################################################
export urlg="https://portwine-linux.ru/portwine-faq/"
export PW_FTP_URL="https://portwine-linux.ru/ftp"
########################################################################
export PW_TERM=""
export PW_WINE_VER_DXVK=""
zen_width=500
if [ -f "${WINEDIR}"_dxvk/version ]; then
    read PW_WINE_VER_DXVK < "${WINEDIR}"_dxvk/version
    PW_WINE_VER_DXVK="( wine: $PW_WINE_VER_DXVK )"
    zen_width=1000
fi
export PW_WINE_VER_VKD3D=""
if [ -f "${WINEDIR}"_vkd3d/version ]; then
    read PW_WINE_VER_VKD3D < "${WINEDIR}"_vkd3d/version
    PW_WINE_VER_VKD3D="( wine: $PW_WINE_VER_VKD3D )"
    zen_width=1000
fi
########################################################################
if [ ! -e "${WINELIB}/run.sh" ] || [ ! -e "${WINELIB}/usr/bin/yad" ] || [ ! -e "${WINELIB}/amd64/usr/bin/vkcube" ] || [ ! -e "${WINELIB}/amd64/usr/bin/xterm" ]; then 
    echo "Download and install libraries..."
    wget -c -T 2 --output-document="${HOME}/.PortWINE/tmp/libs${pw_libs_ver}.tar.xz" "${PW_FTP_URL}"/dist/libs${pw_libs_ver}.tar.xz | sszen &&
    tar -Jxvf "${HOME}/.PortWINE/tmp/libs${pw_libs_ver}.tar.xz" -C "${HOME}/.PortWINE/" | sszen &&
    rm -f "${HOME}/.PortWINE/tmp/libs${pw_libs_ver}.tar.xz"
    "${WINELIB}"/setup.sh --force
fi
if [ -e "${WINELIB}/run.sh" ]; then 
    echo "######################################################"
    echo "Runtime libraries is enabled"
    export pw_yad="${WINELIB}/usr/bin/yad"
    export PW_XTERM="${WINELIB}/amd64/usr/bin/xterm -geometry 159x37 -e"
else
    echo "######################################################"
    echo "Runtime libraries is disabled"
fi
########################################################################
if [ ! -d "${WINE_MONO_GECKO}/gecko" ] || [ ! -d "${WINE_MONO_GECKO}/mono" ] ; then 
    echo "######################################################"
    echo "Download and install wine mono and gecko..."
    ${PW_XTERM} wget -c -T 2 --output-document="${WINE_MONO_GECKO}.tar.xz" "${PW_FTP_URL}"/dist/mono_gecko${pw_gecko_mono_ver}.tar.xz 
    ${PW_XTERM} tar -Jxvf "${WINE_MONO_GECKO}.tar.xz" -C "${HOME}/.PortWINE/" 
    rm -f "${WINE_MONO_GECKO}.tar.xz"
fi
if [ ! -d "${WINEDIR}"/share/wine/ ]; then 
    mkdir -p "${WINEDIR}"/share/wine/
fi
if [ -d "${WINEDIR}"/share/wine/gecko ]; then
    rm -fr "${WINEDIR}"/share/wine/gecko
fi 
ln -s "${WINE_MONO_GECKO}"/gecko "${WINEDIR}"/share/wine/      
if [ -d "${WINEDIR}"/share/wine/mono ]; then
    rm -fr "${WINEDIR}"/share/wine/mono
fi
ln -s "${WINE_MONO_GECKO}"/mono "${WINEDIR}"/share/wine/ 
for pw_dist in "dxvk" "vkd3d"
do
    if [ -d "${WINEDIR}"_"${pw_dist}"/share/wine/ ]; then
        if [ -d "${WINEDIR}"/share/wine/gecko ]; then
            rm -fr "${WINEDIR}"_"${pw_dist}"/share/wine/gecko
            cp -fr "${WINEDIR}"/share/wine/gecko "${WINEDIR}"_"${pw_dist}"/share/wine/ 
        fi 
        if [ -d "${WINEDIR}"/share/wine/mono ]; then
            rm -fr "${WINEDIR}"_"${pw_dist}"/share/wine/mono
            cp -fr "${WINEDIR}"/share/wine/mono "${WINEDIR}"_"${pw_dist}"/share/wine/ 
        fi     
    fi
done  
########################################################################
if [ ! -z "${gamestart}" ]; then
    export PORTWINE_DB=`echo "${gamestart}" | awk -F '/' 'NF>1{print $NF}' | awk -F '.exe' '{print $1}'`
elif [ ! -z "${portwine_exe}" ]; then
    export PORTWINE_DB=`echo "${portwine_exe}" | awk -F '/' 'NF>1{print $NF}' | awk -F '.exe' '{print $1}'`
    export PATH_TO_GAME="$( cd "$( dirname "${portwine_exe}" )" >/dev/null 2>&1 && pwd )"
fi
if [ ! -z "${PORTWINE_DB}" ]; then
    PORTWINE_DB_FILE=`grep -il "${PORTWINE_DB}" "${PORT_SCRIPTS_PATH}/portwine_db"/* | awk -F '.exe' '{print $1}'`
    if [ ! -z "${PORTWINE_DB_FILE}" ]; then
        . "${PORTWINE_DB_FILE}"
        echo "Use ${PORTWINE_DB_FILE} db file."
    else
        . "${PORT_SCRIPTS_PATH}/portwine_db/default"
        echo "Use default db file."
    fi
fi
########################################################################
START_PORTWINE ()
{
if [ "${PW_USE_TERMINAL}" = "1"  ]; then
    if [ -x "`which konsole 2>/dev/null`" ]; then
        export PW_TERM="konsole -e"
    elif [ -x "`which xterm 2>/dev/null`" ]; then
        export PW_TERM="xterm -e"
    elif [ -x "`which gnome-terminal 2>/dev/null`" ]; then
        export PW_TERM="gnome-terminal -- $SHELL -c" 
    elif [ -x "`which lxterminal 2>/dev/null`" ]; then
        export PW_TERM="lxterminal -e" 
    else
        export PW_TERM="${PW_XTERM}"
    fi
fi
PW_UPDATE
########################################################################
if [ ! -z "${PW_VULKAN_USE}" ]; then
    export var_pw_vulkan="${PW_VULKAN_USE}"
    echo "${var_pw_vulkan}" > "${PORT_WINE_TMP_PATH}/pw_vulkan"
else
    read "var_pw_vulkan" < "${PORT_WINE_TMP_PATH}/pw_vulkan"
    export var_pw_vulkan
fi
PW_START_PROGRESS_BAR 
if [ "${var_pw_vulkan}" = "0" ]; then
    if [ -d "${WINEDIR}_dxvk" ]; then
        export WINEDIR="${WINEDIR}_dxvk"
        export MESA_GLSL_CACHE_DIR="${PORT_WINE_TMP_PATH}"
        export mesa_glthread=true
        export __GL_THREADED_OPTIMIZATIONS=1
        export __GL_SHARPEN_IGNORE_FILM_GRAIN=0
        export __GL_LOG_MAX_ANISO=0
        export __GL_ALLOW_FXAA_USAGE=0
        export __GL_SHARPEN_ENABLE=1
        export __GL_SHARPEN_VALUE=0
        export __GL_SHADER_DISK_CACHE_PATH="${PORT_WINE_TMP_PATH}"
        export __GL_SHADER_DISK_CACHE=1
        export __GL_SHADER_DISK_CACHE_SIZE=1000000000
        echo "Use OpenGL"
    fi #Modded by Rus_Nor
elif [ "${var_pw_vulkan}" = "dxvk" ]; then
    export PW_USE_WINED3D=0
    export PW_DXGI_FROM_DXVK=1
    export PW_DX12_DISABLED=1
    if [ -d "${WINEDIR}_dxvk" ]; then
        export WINEDIR="${WINEDIR}_dxvk"
    fi
    echo "Use DXVK and D9VK (DX9-DX11 to Vulkan)"
else
    export PW_USE_WINED3D=1
    if [ -d "${WINEDIR}_vkd3d" ]; then
        export WINEDIR="${WINEDIR}_vkd3d"
    fi
    echo "Use VKD3D (DX12 to vulkan)"
fi
export WINELOADER="${WINEDIR}/bin/wine"
export WINEDLLPATH="${WINEDIR}/lib64/wine:${WINEDIR}/lib/wine"
export WINESERVER="${WINEDIR}/bin/wineserver"
export PATH="${WINEDIR}/bin:${PATH}"

cp -f "${WINEDIR}"/lib/wine/fakedlls/dxgi.dll "${WINEDIR}"/lib/wine/dxgi.dll
cp -f "${WINEDIR}"/lib64/wine/fakedlls/dxgi.dll "${WINEDIR}"/lib64/wine/dxgi.dll

export DXVK_STATE_CACHE_PATH="${PATH_TO_GAME}"
export DXVK_STATE_CACHE=1
export STAGING_SHARED_MEMORY=1
########################################################################
export optirun_on=
export check_optimus_manager=
export PW_NVIDIA="$(lspci | grep NVIDIA)" 
if [ -x "`which optimus-manager 2>/dev/null`" ]; then
    export check_optimus_manager=`optimus-manager --status | grep Current | cut -f 2 -d':' | sed -e 's/^[[:space:]]*//'`
fi
if [ ! -z "${PW_NVIDIA}" ] && [ "${check_optimus_manager}" != "intel" ]; then
    if [ "${check_optimus_manager}" = "nvidia" ]; then
        export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json
    elif [ -x "`which primusrun 2>/dev/null`" ]; then
        export optirun_on="primusrun"
        export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json 
    elif [ -x "`which optirun 2>/dev/null`" ]; then
        export optirun_on="optirun -b primus"
        export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json 
    elif [ -x "`which prime-run 2>/dev/null`" ]; then
        export optirun_on="prime-run"
        export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json 
    fi
    export __NV_PRIME_RENDER_OFFLOAD=1
    export __GLX_VENDOR_LIBRARY_NAME=nvidia
    export __GL_SHADER_DISK_CACHE_PATH="${PORT_WINE_TMP_PATH}" 
    export __GL_SHADER_DISK_CACHE=1
    export __GL_SHADER_DISK_CACHE_SIZE=1000000000
    export __GL_DXVK_OPTIMIZATIONS=1
else
    export DRI_PRIME=1
    export VKD3D_CONFIG=force_bindless_texel_buffer
fi
case "$PW_FORCE_USE_VSYNC" in  # 0-FORCE_OFF, 1-FORCE_ON, 2-BY_DEFAULT
    "0")
    export vblank_mode=0
    export __GL_SYNC_TO_VBLANK=0 ;;
    "1")
    export vblank_mode=1
    export __GL_SYNC_TO_VBLANK=1 ;;  
esac
#export DXVK_CONFIG_FILE="${PORT_WINE_PATH}/data/"
########################################################################
export int_xneur=0
if [ $(pgrep xneur)>'0' ]; then
	killall xneur
	export int_xneur=1
fi 
export PW_XKBD="$(setxkbmap -query | grep -w ru | awk '{print($2)}')"
if [ ! -z ${PW_XKBD} ]; then
    setxkbmap us,ru
fi
########################################################################
if [ -x "`which "gamemoderun" 2>/dev/null`" ] && [ "$PW_FORCE_DISABLED_GAMEMOD" -eq "0" ]; then
    # systemctl --user enable gamemoded.service 
    # systemctl --user restart gamemoded.service
    export PW_GAMEMODERUN=1
    echo "Gamemod will be launched."
else
    export PW_GAMEMODERUN=0
    echo "Gamemod is not installed or disabled in vars script: PW_FORCE_DISABLED_GAMEMOD=$PW_FORCE_DISABLED_GAMEMOD"
fi
echo "######################################################"
########################################################################
PW_CREATE_PFX
RUN_WINETRICKS_FROM_DB 
ADD_IN_START_PORTWINE
} 
########################################################################
WAIT_WINESERVER ()
{
sleep 3
while [ ! -z "$(ls -l /proc/*/exe 2>/dev/null | grep -ie ${portname} | grep -E 'wine(64)?-preloader|wineserver' | awk -F/ '{print $3}')" ] ; do
	sleep 1
done
}
########################################################################
KILL_PORTWINE () 
{
wine_pids=$(ls -l /proc/*/exe 2>/dev/null | grep -ie ${portname} | grep -E 'wine(64)?-preloader|wineserver' | awk -F/ '{print $3}') #modded by Cefeiko
if  [ ! -z "${wine_pids}" ] ; then 
    kill -9 ${wine_pids} 
fi
}
########################################################################
STOP_PORTWINE ()
{
WAIT_WINESERVER
ADD_IN_STOP_PORTWINE
if [ "$int_xneur" = "1"  ]; then
	xneur &
fi
if [ ! -z ${PW_XKBD} ]; then
    setxkbmap ${PW_XKBD}
fi
PW_STOP_PROGRESS_BAR
rm -f "${PORT_WINE_PATH}"/1
rm -f "${PORT_SCRIPTS_PATH}"/1
rm -f "${PORT_WINE_PATH}"/0
rm -f "${PORT_SCRIPTS_PATH}"/0
}
########################################################################
UPDATE_WINETRICKS ()
{
W_TRX_URL="https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks"
W_TRX_EXT_VER="$(curl -s --list-only ${W_TRX_URL} | grep -i 'WINETRICKS_VERSION=' | sed 's/WINETRICKS_VERSION=//')"
if  ! [[ -f "${PORT_WINE_TMP_PATH}/winetricks" ]] 
then
    wget -T 3 --output-document=${PORT_WINE_TMP_PATH}/winetricks ${W_TRX_URL}
    chmod u+x "${PORT_WINE_TMP_PATH}/winetricks"
else
W_TRX_INT_VER="$(cat "${PORT_WINE_TMP_PATH}/winetricks" | grep -i 'WINETRICKS_VERSION=' | sed 's/WINETRICKS_VERSION=//')"
        if  [[ $W_TRX_INT_VER != $W_TRX_EXT_VER ]]
        then
            rm -f "${PORT_WINE_TMP_PATH}/winetricks"
            wget -T 3 --output-document=${PORT_WINE_TMP_PATH}/winetricks ${W_TRX_URL}
            chmod u+x "${PORT_WINE_TMP_PATH}/winetricks"
        fi
fi #modded by Cefeiko
}
########################################################################
RUN_WINETRICKS_FROM_DB ()
{
if [ ! -z "${PW_DLL_INSTALL}" ]; then  
    export USE_WT_FROM_DB=0
    if [ -e "${WINEPREFIX}/winetricks.log" ] ; then
        for need_install_dll_to_pfx in ${PW_DLL_INSTALL} ; do
            grep "${need_install_dll_to_pfx}" "${WINEPREFIX}/winetricks.log"
            if [ "$?" == "1" ] ; then
                export USE_WT_FROM_DB=1
                break
            fi  
        done
    else
        export USE_WT_FROM_DB=1
    fi
    if [ "${USE_WT_FROM_DB}" == "1" ] ; then
        UPDATE_WINETRICKS
        PW_STOP_PROGRESS_BAR
        ${PW_XTERM} "${PW_RUNTIME}" "${PORT_WINE_TMP_PATH}/winetricks" -q ${PW_DLL_INSTALL}
        PW_START_PROGRESS_BAR
    fi
fi
}
########################################################################
PW_UPDATE ()
{
    if [ ! -f "${PORT_WINE_TMP_PATH}/${portname}_ver" ]
then
	echo "10" > "${PORT_WINE_TMP_PATH}/${portname}_ver"
fi

if [ ! -f "${PORT_WINE_TMP_PATH}/update_notifier" ]
then
	echo "1" > "${PORT_WINE_TMP_PATH}/update_notifier"
fi 
read "update_not" < "${PORT_WINE_TMP_PATH}/update_notifier"
if [ "${update_not}" = "1" ] 
then
	wget -T 2 --output-document="${PORT_WINE_TMP_PATH}/${portname}_cur_ver" "http://portwine-linux.ru/current_version/${portname}_ver"
	sleep 1
	if [ -f "${PORT_WINE_TMP_PATH}/${portname}_ver" ]
	then
		read current_ver < "${PORT_WINE_TMP_PATH}/${portname}_cur_ver"
		read install_ver < "${PORT_WINE_TMP_PATH}/${portname}_ver"
		rm -f "${PORT_WINE_TMP_PATH}/${portname}_cur_ver"
		if  [ "${current_ver}" -gt "${install_ver}" ]
		then	
			xsd=`zenity --title  "${port_upd1}" --text "${port_upd2}" --list --radiolist --height=220 --column="${inst_set}" --column "${port_upd3}" \
			TRUE "${port_upd4}" \
			FALSE "${port_upd5}" \
			FALSE "${port_upd6}" `
			case $xsd in
				"${port_upd4}")
					"${WINESERVER}" -k
					xdg-open $porturl 
					exit 0 ;;
				"${port_upd5}")
					echo " " ;;	
				"${port_upd6}")
				echo "0" > "${PORT_WINE_TMP_PATH}/update_notifier" ;;
			esac 
		fi
	fi
fi
########################################################################
if [ ! -f "${HOME}/.config/.PortTime" ]
then
	echo "10" > "${HOME}/.config/.PortTime"
fi

read "port_time" < "${HOME}/.config/.PortTime"

if [ "${port_time}" -gt "1" ]
then
	port_time=$((${port_time}-1))
	echo "${port_time}" > "${HOME}/.config/.PortTime"
else
	xsd2=`zenity --title  "${port_time1}" --text "${port_time2}" --list --radiolist --height=240 --column="${inst_set3}" --column "${port_time3}" \
		TRUE "${port_time4}" \
		FALSE "${port_time5}" \
		FALSE "${port_time6}" `
		if [ $? = 1 ]
		then 
			echo "1" > "${HOME}/.config/.PortTime"
		else
		case $xsd2 in
			"${port_time4}")
				if [ ! -z "$(command -v sensible-browser)" ]; then
					sensible-browser "$urlg" &
				elif [ ! -z "$(command -v xdg-open)" ]; then
					xdg-open "$urlg" &
				elif [ ! -z "$(command -v gnome-open)" ]; then
					gnome-open "$urlg" &
				elif [ ! -z "$(command -v python)" ]; then
					python -m webbrowser "$urlg" 
				fi &
				echo "300" > "${HOME}/.config/.PortTime" 
				sleep 5
				exit 0 ;;
			"${port_time5}")
				echo "75" > "${HOME}/.config/.PortTime" ;;
			"${port_time6}")
				echo "150" > "${HOME}/.config/.PortTime" ;;
		esac 
		fi
fi 
}
PW_CREATE_PFX ()
{
sed -i '/HKCU,Software\\Valve\\Steam/d' "${WINEDIR}"*/share/wine/wine.inf 
sed -i '/HKLM,Software\\Wow6432Node\\Valve\\Steam/d' "${WINEDIR}"*/share/wine/wine.inf 
sed -i '/HKLM,Software\\Wow6432Node\\Valve\\Steam/d' "${WINEDIR}"*/share/wine/wine.inf 
sed -i '/HKCR,steam\\shell\\open\\command/d' "${WINEDIR}"*/share/wine/wine.inf 
sed -i '/HKCR,steam\\shell\\open\\command/d' "${WINEDIR}"*/share/wine/wine.inf 

rm -f  "${WINEDIR}"*/lib*/*steam* 
rm -f  "${WINEDIR}"*/lib*/wine/*steam* 
rm -f  "${WINEDIR}"*/lib*/wine/fakedlls/*steam* 
if [ ! -d "${WINEPREFIX}" ] || [ ! -d "${WINEPREFIX}"/drive_c/windows ]; then
    PW_STOP_PROGRESS_BAR
    ${PW_XTERM} "${PW_RUNTIME}" "${WINELOADER}" wineboot -u 
    PW_START_PROGRESS_BAR
fi
sed -i '/steamclient/d' "${WINEPREFIX}"/*.reg 
sed -i '/SteamPath/d' "${WINEPREFIX}"/*.reg 

rm -f "${WINEPREFIX}/drive_c/windows/system32"/steam* 
rm -f "${WINEPREFIX}/drive_c/windows/syswow64"/steam* 
}