#!/bin/bash
# Author: PortWINE-Linux.ru
########################################################################
echo '
████─████─████─███─█───█─███─█──█─███
█──█─█──█─█──█──█──█───█──█──██─█─█
████─█──█─████──█──█─█─█──█──█─██─███
█────█──█─█─█───█──█████──█──█──█─█
█────████─█─█───█───█─█──███─█──█─███

'
[ $(id -u) = 0 ] && echo "Do not run this script as root!" && zenity --error --text "Do not run this script as root!" && exit 1
if [ "${s_install}" != "1" ] && [ ! -x "`which "zenity" 2>/dev/null`" ];then
    echo "You will need to install: zenity, and restart the port." 
    xdg-open "http://portwine-linux.ru/portwine-faq/" > /dev/null 2>&1 & exit 0
fi
print_error () {
    PS1_old="${PS1}" && PS1="\e[40;11;31m[\u@\h \W]$" 
    echo "ERROR: $@"
    PS1="${PS1_old}"
}
print_info () {
    PS1_old="${PS1}" && PS1="\e[40;11;36m[\u@\h \W]$" 
    echo "INFO: $@"
    PS1="${PS1_old}"
}
print_var () {
    PS1_old="${PS1}" && PS1="\e[47;11;30m[\u@\h \W]$"
    for vp in $@ ; do echo "${vp} = ${!vp}" ; done 
    PS1="${PS1_old}"
}
try_copy_file () {
    if [ ! -f "$1" ] ; then	print_info "file $1 not found for copy"
    elif [ -z "$2" ] ; then	print_error "no way to copy file $1"
    else
        cp -f "$1" "$2"
        [ "$?" != 0 ] && print_error "failed to copy file $1 to $2" || return 0
    fi
    return 1  
}
try_copy_dir () {
    if [ ! -d "$1" ] ; then	print_info "directory $1 not found for copy"
    elif [ -z "$2" ] ; then	print_error "no way to copy directory $1"
    else
        cp -fr "$1" "$2"
        [ "$?" != 0 ] && print_error "failed to copy directory $1 to $2" || return 0
    fi
    return 1 
}
try_remove_file () {
    if [ ! -f "$1" ] ; then	print_info "file $1 not found for remove"
    else
        rm -f "$1"
        [ "$?" != 0 ] && print_error "failed to remove file $1" || return 0
    fi
    return 1 
}
try_remove_dir () {
    if [ ! -d "$1" ] ; then	print_info "directory $1 not found for remove"
    else
        rm -fr "$1"
        [ "$?" != 0 ] && print_error "failed to remove directory $1" || return 0
    fi
    return 1  
}
try_force_link_file () {
    if [ ! -f "$1" ] ; then	print_info "file $1 not found for link"
    elif [ -z "$2" ] ; then	print_error "no way to link file $1"
    else
        [ -f "$2" ] && rm -f "$2"
        ln -s "$1" "$2"
        [ "$?" != 0 ] && print_error "failed to link file $1 to $2" || return 0
    fi
    return 1  
}
try_force_link_dir () {
    if [ ! -d "$1" ] ; then	print_info "directory $1 not found for link"
    elif [ -z "$2" ] ; then	print_error "no way to link directory $1"
    else
        ln -sf "$1" "$2"
        [ "$?" != 0 ] && print_error "failed to link directory $1 to $2" || return 0
    fi
    return 1  
}
try_download () {
    wget -c -t 3 -T 2 "$1" --output-document="$2"
    [ "$?" != 0 ] && print_error "failed to download $1. Scipping." && export DOWNLOAD_ERROR=1 && return 1 || export DOWNLOAD_ERROR=0 && return 0 
}
create_new_dir () {
    if [ ! -d "$1" ] ; then
        mkdir -p "$1"
    fi 
}
var_winedlloverride_update () {
    if [ ! -z "${WINEDLLOVERRIDES}" ] 
    then export WINEDLLOVERRIDES="${1};${WINEDLLOVERRIDES}"
    else export WINEDLLOVERRIDES="${1}"
    fi 
}

sszen() {
    zenity --progress --title="Settings..." --text="Updating parameters" --no-cancel --pulsate --auto-close --width 400
    } 
PW_START_PROGRESS_BAR () {
    "${pw_yad}" --progress --progress-text="Start ${portname}... Please wait..." --pulsate --close-on-unfocus \
    --no-buttons --undecorated --center --skip-taskbar --width=600 --wrap-width=500 &
    export start_progress_yad_pid=$(echo $!) 
    }
PW_STOP_PROGRESS_BAR () {
    if [ ! -z "${start_progress_yad_pid}" ] ; then
        kill "${start_progress_yad_pid}"
    fi 
}
export PW_WINDOWS_VER="7"
cd "$(dirname "`readlink -f "$0"`")" && export PORT_SCRIPTS_PATH="$(pwd)"
cd "${PORT_SCRIPTS_PATH}/../../" && export PORT_WINE_PATH="$(pwd)"
export PORT_WINE_TMP_PATH="${PORT_WINE_PATH}/data/tmp"
read "portname" < "${PORT_WINE_TMP_PATH}/portname" && export portname
cd "${PORT_SCRIPTS_PATH}" 
. "${PORT_SCRIPTS_PATH}/vars/${portname}_vars"
create_new_dir "${PORT_WINE_TMP_PATH}"
create_new_dir "${HOME}/.PortWINE/tmp"

if [ ! -e "${PORT_WINE_TMP_PATH}/${portname}_loc" ]; then
	SET_LANG=`zenity --title  "Install $portname" --text "Select the language" --list --radiolist \
	--column="Set:" --column "Language:" \
	TRUE "RUS" \
	FALSE "ENG" `
	echo "${SET_LANG}" > "${PORT_WINE_TMP_PATH}/${portname}_loc"
fi
if [ "${portname}" = "PortProton" ]; then
    if [ -e "${PORT_WINE_TMP_PATH}/pw_vulkan" ]; then
        rm -f "${PORT_WINE_TMP_PATH}/pw_vulkan"
    fi
fi
. "${PORT_SCRIPTS_PATH}"/lang
if [ ! -e "${PORT_WINE_TMP_PATH}/${portname}_ver" ]; then
	echo "10" > "${PORT_WINE_TMP_PATH}/${portname}_ver"
fi

export pw_libs_ver="_v7"
export pw_gecko_mono_ver="_v2"
export PW_VULKAN_DLL="${PORT_WINE_PATH}"/data/vulkan
export WINEDIR="${PORT_WINE_PATH}"/data/dist
export WINELIB="${HOME}/.PortWINE/libs${pw_libs_ver}"
export WINE_MONO_GECKO="${HOME}/.PortWINE/mono_gecko${pw_gecko_mono_ver}"
export WINEPREFIX="${PORT_WINE_PATH}/data/pfx/"
export PW_COMPAT_DATA_PATH="${PORT_WINE_PATH}/data/"
export PW_COMPAT_MEDIA_PATH="${PORT_WINE_TMP_PATH}/"
export PW_RUNTIME="$WINELIB/run.sh"
export PW_GUI_ICON_PATH="${PORT_WINE_PATH}/data/img/gui"
export urlg="https://portwine-linux.ru/portwine-faq/"
export PW_FTP_URL="https://portwine-linux.ru/ftp"
export PW_TERM=""
export PW_WINE_VER_DXVK=""
var_winedlloverride_update "winemenubuilder.exe="

zen_width=500
if [ -f "${WINEDIR}"_dxvk/version ]; then
    read PW_WINE_VER_DXVK < "${WINEDIR}"_dxvk/version
    PW_WINE_VER_DXVK="( wine: $PW_WINE_VER_DXVK )"
    zen_width=1000
fi
export PW_WINE_VER_VKD3D=""
if [ -f "${WINEDIR}"_vkd3d/version ]; then
    read PW_WINE_VER_VKD3D < "${WINEDIR}"_vkd3d/version
    PW_WINE_VER_VKD3D="( wine: $PW_WINE_VER_VKD3D )"
    zen_width=1000
fi
if [ ! -e "${WINELIB}/run.sh" ] || [ ! -e "${WINELIB}/usr/bin/yad" ] || [ ! -e "${WINELIB}/amd64/usr/bin/vkcube" ] || [ ! -e "${WINELIB}/amd64/usr/bin/xterm" ] || [ -e "${HOME}/.PortWINE/tmp/libs${pw_libs_ver}.tar.xz" ] ; then 
    echo "Download and install libraries..."
    try_download "${PW_FTP_URL}/dist/libs${pw_libs_ver}.tar.xz" "${HOME}/.PortWINE/tmp/libs${pw_libs_ver}.tar.xz" | sszen &&
    [ "${DOWNLOAD_ERROR}" != 1 ] && tar -Jxvf "${HOME}/.PortWINE/tmp/libs${pw_libs_ver}.tar.xz" -C "${HOME}/.PortWINE/" | sszen &&
    [ "${DOWNLOAD_ERROR}" != 1 ] && rm -f "${HOME}/.PortWINE/tmp/libs${pw_libs_ver}.tar.xz"
    [ "${DOWNLOAD_ERROR}" != 1 ] && "${WINELIB}"/setup.sh --force
fi
if [ -e "${WINELIB}/run.sh" ]; then 
    echo "######################################################"
    echo "Runtime libraries is enabled"
    export pw_yad="${WINELIB}/usr/bin/yad"
    export PW_XTERM="${WINELIB}/amd64/usr/bin/xterm -geometry 159x37 -e"
else
    echo "######################################################"
    echo "Runtime libraries is disabled"
fi
if [ ! -d "${WINE_MONO_GECKO}/gecko" ] || [ ! -d "${WINE_MONO_GECKO}/mono" ] || [ -e "${WINE_MONO_GECKO}.tar.xz" ] ; then 
    echo "######################################################"
    echo "Download and install wine mono and gecko..."
    try_download "${PW_FTP_URL}"/dist/mono_gecko${pw_gecko_mono_ver}.tar.xz  "${WINE_MONO_GECKO}.tar.xz" | sszen &&
    [ "${DOWNLOAD_ERROR}" != 1 ] && ${PW_XTERM} tar -Jxvf "${WINE_MONO_GECKO}.tar.xz" -C "${HOME}/.PortWINE/" 
    [ "${DOWNLOAD_ERROR}" != 1 ] && try_remove_file "${WINE_MONO_GECKO}.tar.xz"
fi
create_new_dir "${WINEDIR}/share/wine/"
try_force_link_dir "${WINE_MONO_GECKO}"/gecko "${WINEDIR}"/share/wine/      
try_force_link_dir "${WINE_MONO_GECKO}"/mono "${WINEDIR}"/share/wine/ 

for pw_dist in "dxvk" "vkd3d"
do
    if [ -d "${WINEDIR}"_"${pw_dist}"/share/wine/ ]; then
        try_force_link_dir "${WINEDIR}"/share/wine/gecko "${WINEDIR}"_"${pw_dist}"/share/wine/ 
        try_force_link_dir "${WINEDIR}"/share/wine/mono "${WINEDIR}"_"${pw_dist}"/share/wine/     
    fi
done 
if [ ! -z "${gamestart}" ]; then
    export PORTWINE_DB=`echo "${gamestart}" | awk -F '/' 'NF>1{print $NF}' | sed s/".exe"/""/gi`
elif [ ! -z "${portwine_exe}" ]; then
    export PORTWINE_DB=`echo "${portwine_exe}" | awk -F '/' 'NF>1{print $NF}' | sed s/".exe"/""/gi`
    export PATH_TO_GAME="$( cd "$( dirname "${portwine_exe}" )" >/dev/null 2>&1 && pwd )"
    export WIN_PATH_TO_GAME=`echo "C:${PATH_TO_GAME}" | sed "s%$WINEPREFIX%%g" | sed "s/drive_c//g" | sed 's#/#\\\#g'`           
fi
if [ ! -z "${PORTWINE_DB}" ]; then
    PORTWINE_DB_FILE=`grep -il "#${PORTWINE_DB}" "${PORT_SCRIPTS_PATH}/portwine_db"/* | sed s/".exe"/""/gi`
    if [ ! -z "${PORTWINE_DB_FILE}" ]; then
        . "${PORTWINE_DB_FILE}"
        echo "Use ${PORTWINE_DB_FILE} db file."
    else
        . "${PORT_SCRIPTS_PATH}/portwine_db/default"
        echo "Use default db file."
    fi
fi 
########################################################################
    START_PORTWINE ()
    {
    if [ "${PW_USE_TERMINAL}" = "1"  ]; then
        if [ -x "`which konsole 2>/dev/null`" ]; then
            export PW_TERM="konsole -e"
        elif [ -x "`which xterm 2>/dev/null`" ]; then
            export PW_TERM="xterm -e"
        elif [ -x "`which gnome-terminal 2>/dev/null`" ]; then
            export PW_TERM="gnome-terminal -- $SHELL -c" 
        elif [ -x "`which lxterminal 2>/dev/null`" ]; then
            export PW_TERM="lxterminal -e" 
        else
            export PW_TERM="${PW_XTERM}"
        fi
    fi
    PW_UPDATE
    if [ ! -z "${PW_VULKAN_USE}" ]; then
        export var_pw_vulkan="${PW_VULKAN_USE}"
        echo "${var_pw_vulkan}" > "${PORT_WINE_TMP_PATH}/pw_vulkan"
    else
        read "var_pw_vulkan" < "${PORT_WINE_TMP_PATH}/pw_vulkan" && export var_pw_vulkan
    fi
    PW_START_PROGRESS_BAR 
    if [ "${var_pw_vulkan}" = "0" ]; then
        if [ -d "${WINEDIR}_dxvk" ]; then
            export WINEDIR="${WINEDIR}_dxvk"
        fi
        export MESA_GLSL_CACHE_DIR="${PORT_WINE_TMP_PATH}"
        export GL_NO_DSO_FINALIZER=1 #Modded by Rus_Nor
        export GL_YIELD="NOTHING" #Modded by Rus_Nor
        export GL_SHARPEN_IGNORE_FILM_GRAIN=0 #Modded by Rus_Nor
        export GL_SHARPEN_ENABLE=1 #Modded by Rus_Nor
        export __GL_SHARPEN_VALUE=0 #Modded by Rus_Nor
        for wine_build_dll in d3d11 d3d10 d3d10core d3d10_1 d3d9 ; do
            try_copy_file "${WINEDIR}/lib/wine/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
            try_copy_file "${WINEDIR}/lib64/wine/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/"
        done
        try_copy_file "${WINEDIR}"/lib/wine/fakedlls/dxgi.dll "${WINEPREFIX}/drive_c/windows/syswow64/"
        try_copy_file "${WINEDIR}"/lib64/wine/fakedlls/dxgi.dll "${WINEPREFIX}/drive_c/windows/system32/"
        var_winedlloverride_update "dxgi=b"
        export PW_FORCE_LARGE_ADDRESS_AWARE=0
        echo "Use OpenGL"
    elif [ "${var_pw_vulkan}" = "dxvk" ]; then
        if [ -d "${WINEDIR}_dxvk" ]; then
            export WINEDIR="${WINEDIR}_dxvk"
        fi
        for wine_dxvk_dll in d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi ; do
            try_copy_file "${PW_VULKAN_DLL}/dxvk/x32/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
            try_copy_file "${PW_VULKAN_DLL}/dxvk/x64/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/"
            [ "$?" == 0 ] && var_winedlloverride_update "${wine_dxvk_dll}=n"
        done
        echo "Use DXVK (DX9-DX11 to Vulkan)"
    else
        if [ -d "${WINEDIR}_vkd3d" ]; then
            export WINEDIR="${WINEDIR}_vkd3d"
        fi
        for wine_vkd3d_dll in d3d12 libvkd3d-proton-utils-2 ; do
            try_copy_file "${PW_VULKAN_DLL}/vkd3d-proton/x86/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
            try_copy_file "${PW_VULKAN_DLL}/vkd3d-proton/x64/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/"
            [ "$?" == 0 ] && var_winedlloverride_update "${wine_vkd3d_dll}=n"
        done
        if [ ! -z "${PW_DXGI_FROM_DXVK}" ] && [ "${PW_DXGI_FROM_DXVK}" != 0 ] ; then
            try_copy_file "${PW_VULKAN_DLL}/dxvk/x32/dxgi.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
            try_copy_file "${PW_VULKAN_DLL}/dxvk/x64/dxgi.dll" "${WINEPREFIX}/drive_c/windows/system32/"
            var_winedlloverride_update "dxgi=n"
        else
            try_copy_file "${WINEDIR}/lib/wine/fakedlls/dxgi.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
            try_copy_file "${WINEDIR}/lib64/wine/fakedlls/dxgi.dll" "${WINEPREFIX}/drive_c/windows/system32/"
            var_winedlloverride_update "dxgi=b"
        fi
        export PW_WINDOWS_VER="10"
        echo "Use VKD3D (DX12 to vulkan)"
    fi
    try_copy_file "${PW_VULKAN_DLL}/dxvk/x32/dxvk_config.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
    try_copy_file "${PW_VULKAN_DLL}/dxvk/x64/dxvk_config.dll" "${WINEPREFIX}/drive_c/windows/system32/"
    [ "$?" == 0 ] && var_winedlloverride_update "dxvk_config.dll=n"

    export WINELOADER="${WINEDIR}/bin/wine"
    export WINEDLLPATH="${WINEDIR}/lib64/wine:${WINEDIR}/lib/wine"
    export WINESERVER="${WINEDIR}/bin/wineserver"
    if [ ! -z "${PATH}" ] 
    then export PATH="${WINEDIR}/bin:${PATH}"
    else export PATH="${WINEDIR}/bin"
    fi
    export WINE="${WINELOADER}"

    rm -f  "${WINEDIR}"*/lib*/*steam* 
    rm -f  "${WINEDIR}"*/lib*/wine/*steam* 
    rm -f  "${WINEDIR}"*/lib*/wine/fakedlls/*steam* 
    rm -f "${WINEPREFIX}/drive_c/windows/system32"/steam* 
    rm -f "${WINEPREFIX}/drive_c/windows/syswow64"/steam* 

    try_copy_file "${WINEDIR}/share/fonts/"LiberationSans-Regular.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"arial.ttf
    try_copy_file "${WINEDIR}/share/fonts/"LiberationSans-Bold.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"arialbd.ttf
    try_copy_file "${WINEDIR}/share/fonts/"LiberationSerif-Regular.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"times.ttf
    try_copy_file "${WINEDIR}/share/fonts/"LiberationMono-Regular.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"cour.ttf
    try_copy_file "${WINEDIR}/share/fonts/"SourceHanSansSCRegular.otf "${WINEPREFIX}/drive_c/windows/Fonts/"msyh.ttf

    for wine_build_dll in ntdll mf mf3216 mferror mfmediaengine mfplat mfplay mfreadwrite vulkan-1 ; do #sqmapi msmpeg2vdec msmpeg2adec colorcnv
        try_copy_file "${WINEDIR}/lib/wine/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
        try_copy_file "${WINEDIR}/lib64/wine/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/"
        [ "$?" == 0 ] && var_winedlloverride_update "${wine_build_dll}=b"
    done
    var_winedlloverride_update "vstdlib_s,tier0_s,steam,steam2,steam_api,steam_api64,steamclient,steamclient64=n"
#    export GST_PLUGIN_SYSTEM_PATH_1_0="${WINEDIR}/lib64/gstreamer-1.0:${WINEDIR}/gstreamer-1.0"
    export WINE_GST_REGISTRY_DIR="${PORT_WINE_TMP_PATH}"
    export MEDIACONV_AUDIO_DUMP_FILE="${PORT_WINE_TMP_PATH}"/audio.foz
    export MEDIACONV_AUDIO_TRANSCODED_FILE="${PORT_WINE_TMP_PATH}"/transcoded_audio.foz
    export MEDIACONV_VIDEO_DUMP_FILE="${PORT_WINE_TMP_PATH}"/video.foz
    export MEDIACONV_VIDEO_TRANSCODED_FILE="${PORT_WINE_TMP_PATH}"/transcoded_video.foz

    if [ ! -z "${PW_LOG}" ] && [ "${PW_LOG}" != 0 ] ; then
        export WINEDEBUG="fixme-all,err+loaddll,err+dll,err+file,err+reg"
        export DXVK_LOG_LEVEL="info"
        export VKD3D_DEBUG="warn"
        export WINE_MONO_TRACE="E:System.NotImplementedException"
    else
        export WINEDEBUG="-all"
        export DXVK_LOG_LEVEL="none"
        export VKD3D_DEBUG="none"
        export DXVK_LOG_PATH="none"
    fi

    #default wine-mono override for FNA games
    export WINE_MONO_OVERRIDES="Microsoft.Xna.Framework.*,Gac=n"

    if [ ! -z "${PW_NO_ESYNC}" ] && [ "${PW_NO_ESYNC}" != 0 ] 
    then export WINEESYNC=""
    else export WINEESYNC="1"
    fi
    if [ ! -z "${PW_NO_FSYNC}" ] && [ "${PW_NO_FSYNC}" != 0 ] ; then
        export WINEFSYNC=""
        export WINEFSYNC_FUTEX2="0"
    else
        export WINEFSYNC="1"
        export WINEFSYNC_FUTEX2="1"
    fi
    if [ ! -z "${PW_FORCE_LARGE_ADDRESS_AWARE}" ] && [ "${PW_FORCE_LARGE_ADDRESS_AWARE}" != 0 ] 
    then export WINE_LARGE_ADDRESS_AWARE="1"
    else export WINE_LARGE_ADDRESS_AWARE="0"
    fi
    if [ ! -z "${PW_OLD_GL_STRING}" ] && [ "${PW_OLD_GL_STRING}" != 0 ] ; then
        export MESA_EXTENSION_MAX_YEAR="2003" #mesa override
        export __GL_ExtensionStringVersion="17700" #nvidia override
    fi
    if [ ! -z "${PW_NO_WRITE_WATCH}" ] && [ "${PW_NO_WRITE_WATCH}" != 0 ] ; then
        export WINE_DISABLE_WRITE_WATCH="1"
    fi
    if [ ! -z "${PW_DXVK_NO_ASYNC}" ] && [ "${PW_DXVK_NO_ASYNC}" != 0 ] ; then
        export RADV_DEBUG="llvm"
    fi
    if [ ! -z "${PW_NVAPI_DISABLE}" ] && [ "${PW_NVAPI_DISABLE}" != 0 ] ; then
        var_winedlloverride_update "nvapi,nvapi64="
    fi
    if [ ! -z "${PW_WINEDBG_DISABLE}" ] && [ "${PW_WINEDBG_DISABLE}" != 0 ] ; then
        var_winedlloverride_update "winedbg.exe="
    fi
    if [ ! -z "${PW_HIDE_NVIDIA_GPU}" ] && [ "${PW_HIDE_NVIDIA_GPU}" != 0 ] ; then
        export WINE_HIDE_NVIDIA_GPU="1"
    fi
    if [ ! -z "${PW_VKD3D_FEATURE_LEVEL}" ] && [ "${PW_VKD3D_FEATURE_LEVEL}" != 0 ] ; then
        export VKD3D_FEATURE_LEVEL="12_0"
    fi
    if [ ! -z "${PW_HEAP_DELAY_FREE}" ] && [ "${PW_HEAP_DELAY_FREE}" != 0 ] ; then
        export WINE_HEAP_DELAY_FREE="1"
    fi

    create_new_dir "${PORT_WINE_TMP_PATH}/dxvk_cache"
    export DXVK_STATE_CACHE_PATH="${PORT_WINE_TMP_PATH}"/dxvk_cache
    export DXVK_STATE_CACHE=1
    export STAGING_SHARED_MEMORY=1
    export optirun_on=
    export check_optimus_manager=
    export PW_NVIDIA="$(lspci | grep NVIDIA)" 
    if [ -x "`which optimus-manager 2>/dev/null`" ]; then
        export check_optimus_manager=`optimus-manager --status | grep Current | cut -f 2 -d':' | sed -e 's/^[[:space:]]*//'`
    fi
    if [ ! -z "${PW_NVIDIA}" ] && [ "${check_optimus_manager}" != "intel" ]; then
        if [ "${check_optimus_manager}" = "nvidia" ]; then
            export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json
        elif [ -x "`which primusrun 2>/dev/null`" ]; then
            export optirun_on="primusrun"
            export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json 
        elif [ -x "`which optirun 2>/dev/null`" ]; then
            export optirun_on="optirun -b primus"
            export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json 
        elif [ -x "`which prime-run 2>/dev/null`" ]; then
            export optirun_on="prime-run"
            export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json 
        fi
        export __NV_PRIME_RENDER_OFFLOAD=1
        export __GLX_VENDOR_LIBRARY_NAME=nvidia
        if [ ! -d "${PORT_WINE_TMP_PATH}"/gl_shader_cache ] ; then
            mkdir -p "${PORT_WINE_TMP_PATH}"/gl_shader_cache 
        fi
        export __GL_SHADER_DISK_CACHE_PATH="${PORT_WINE_TMP_PATH}/gl_shader_cache" 
        export __GL_SHADER_DISK_CACHE=1
        export __GL_SHADER_DISK_CACHE_SIZE=1000000000
        export __GL_DXVK_OPTIMIZATIONS=1
    else
        export DRI_PRIME=1
    fi
    case "$PW_FORCE_USE_VSYNC" in  # 0-FORCE_OFF, 1-FORCE_ON, 2-BY_DEFAULT
        "0")
        export vblank_mode=0
        export __GL_SYNC_TO_VBLANK=0 ;;
        "1")
        export vblank_mode=1
        export __GL_SYNC_TO_VBLANK=1 ;;  
    esac
    #export DXVK_CONFIG_FILE="${PORT_WINE_PATH}/data/"
    export int_xneur=0
    if [ $(pgrep xneur)>'0' ]; then
        killall xneur
        export int_xneur=1
    fi 
    export PW_XKBD="$(setxkbmap -query | grep -w ru | awk '{print($2)}')"
    if [ ! -z ${PW_XKBD} ]; then
        setxkbmap us,ru
    fi
    if [ -x "`which "gamemoderun" 2>/dev/null`" ] && [ "$PW_FORCE_DISABLED_GAMEMOD" -eq "0" ]; then
        export PW_GAMEMODERUN=1
        echo "Gamemod will be launched."
    else
        export PW_GAMEMODERUN=0
        echo "Gamemod is not installed or disabled in vars script: PW_FORCE_DISABLED_GAMEMOD=$PW_FORCE_DISABLED_GAMEMOD"
    fi
    PW_CREATE_PFX
    RUN_WINETRICKS_FROM_DB 
    ADD_IN_START_PORTWINE
} 

WAIT_WINESERVER () {
    sleep 3
    while [ ! -z "$(ls -l /proc/*/exe 2>/dev/null | grep -ie ${portname} | grep -E 'wine(64)?-preloader|wineserver' | awk -F/ '{print $3}')" ] ; do
        sleep 1
    done
}

KILL_PORTWINE () {
    wine_pids=$(ls -l /proc/*/exe 2>/dev/null | grep -ie ${portname} | grep -E 'wine(64)?-preloader|wineserver' | awk -F/ '{print $3}') #modded by Cefeiko
    if  [ ! -z "${wine_pids}" ] ; then 
        "${WINESERVER}" -k
        kill -9 ${wine_pids} 
    fi
}

STOP_PORTWINE () {
    WAIT_WINESERVER
    ADD_IN_STOP_PORTWINE
    if [ "$int_xneur" = "1"  ]; then
        xneur &
    fi
    if [ ! -z ${PW_XKBD} ]; then
        setxkbmap ${PW_XKBD}
    fi 
    PW_STOP_PROGRESS_BAR
}

UPDATE_WINETRICKS () {
    W_TRX_URL="https://raw.githubusercontent.com/Winetricks/winetricks/master/src/winetricks"
    W_TRX_EXT_VER="$(curl -s --list-only ${W_TRX_URL} | grep -i 'WINETRICKS_VERSION=' | sed 's/WINETRICKS_VERSION=//')"
    print_info "Version winetricks on server: ${W_TRX_EXT_VER}"
    if  [ ! -f "${PORT_WINE_TMP_PATH}/winetricks" ] ; then
        try_download "${W_TRX_URL}" "${PORT_WINE_TMP_PATH}/winetricks" 
        chmod u+x "${PORT_WINE_TMP_PATH}/winetricks"
    else
        W_TRX_INT_VER="$(cat "${PORT_WINE_TMP_PATH}/winetricks" | grep -i 'WINETRICKS_VERSION=' | sed 's/WINETRICKS_VERSION=//')"
        print_info "Version winetricks in port: ${W_TRX_EXT_VER}"
        if [ $W_TRX_INT_VER != $W_TRX_EXT_VER ] ; then
            rm -f "${PORT_WINE_TMP_PATH}/winetricks"
            try_download "${W_TRX_URL}" "${PORT_WINE_TMP_PATH}/winetricks"
            [ "$?" == 0 ] && print_info "Winetricks version in port has been updated" 
            chmod u+x "${PORT_WINE_TMP_PATH}/winetricks"
        fi
    fi #modded by Cefeiko
    sed -i '/w_try winetricks_early_wine cmd/d' "${PORT_WINE_TMP_PATH}/winetricks"
    try_remove_dir "${HOME}/.cache/winetricks/"
}

RUN_WINETRICKS_FROM_DB () {
    UPDATE_WINETRICKS
    if [ ! -z "${PW_DLL_INSTALL}" ]; then
        PW_STOP_PROGRESS_BAR
        export USE_WT_FROM_DB=0
        if [ -e "${WINEPREFIX}/winetricks.log" ] ; then
            for need_install_dll_to_pfx in ${PW_DLL_INSTALL} ; do
                grep "${need_install_dll_to_pfx}" "${WINEPREFIX}/winetricks.log"
                if [ "$?" == "1" ] ; then
                    export USE_WT_FROM_DB=1
                    break
                fi  
            done
        else
            export USE_WT_FROM_DB=1
        fi
        if [ "${USE_WT_FROM_DB}" == "1" ] ; then
            UPDATE_WINETRICKS
            PW_STOP_PROGRESS_BAR
            ${PW_XTERM} "${PW_RUNTIME}" "${PORT_WINE_TMP_PATH}/winetricks" -q ${PW_DLL_INSTALL}
            PW_START_PROGRESS_BAR
        fi
        PW_START_PROGRESS_BAR
    fi
    if [[ -z `cat "${WINEPREFIX}/system.reg" | grep "Windows $PW_WINDOWS_VER"` ]] ; then
        if [ ! -z "${PW_WINDOWS_VER}" ] && [ `echo "$PW_WINDOWS_VER" | sed 's/.*/\L&/'` == "xp" ] ; then
            export PW_WINDOWS_VER="xp64"
        fi
        "${PW_RUNTIME}" "${WINELOADER}" winecfg -v `echo "win${PW_WINDOWS_VER}" | sed 's/.*/\L&/'`
        echo "Set to win${PW_WINDOWS_VER}"
    fi
}

PW_UPDATE () {
    if [ ! -f "${PORT_WINE_TMP_PATH}/${portname}_ver" ] ; then
        echo "10" > "${PORT_WINE_TMP_PATH}/${portname}_ver"
    fi
    if [ ! -f "${PORT_WINE_TMP_PATH}/update_notifier" ] ; then
        echo "1" > "${PORT_WINE_TMP_PATH}/update_notifier"
    fi 
    read "update_not" < "${PORT_WINE_TMP_PATH}/update_notifier" 
    if [ "${update_not}" = "1" ] ; then
        try_download "${PW_FTP_URL}/current_version/${portname}_ver" "${PORT_WINE_TMP_PATH}/${portname}_cur_ver" &&
        if [ -f "${PORT_WINE_TMP_PATH}/${portname}_ver" ] ; then
            read current_ver < "${PORT_WINE_TMP_PATH}/${portname}_cur_ver"
            read install_ver < "${PORT_WINE_TMP_PATH}/${portname}_ver"
            try_remove_file "${PORT_WINE_TMP_PATH}/${portname}_cur_ver"
            if  [ "${current_ver}" -gt "${install_ver}" ] ; then	
                xsd=`zenity --title  "${port_upd1}" --text "${port_upd2}" --list --radiolist --height=220 --column="${inst_set}" --column "${port_upd3}" \
                TRUE "${port_upd4}" \
                FALSE "${port_upd5}" \
                FALSE "${port_upd6}" `
                case $xsd in
                    "${port_upd4}")
                        "${WINESERVER}" -k
                        xdg-open $porturl 
                        exit 0 ;;
                    "${port_upd5}")
                        echo " " ;;	
                    "${port_upd6}")
                    echo "0" > "${PORT_WINE_TMP_PATH}/update_notifier" ;;
                esac 
            fi
        fi
    fi
    if [ ! -f "${HOME}/.config/.PortTime" ] ; then
        echo "10" > "${HOME}/.config/.PortTime"
    fi
    read "port_time" < "${HOME}/.config/.PortTime"
    if [ "${port_time}" -gt "1" ] ; then
        port_time=$((${port_time}-1))
        echo "${port_time}" > "${HOME}/.config/.PortTime"
    else
        xsd2=`zenity --title  "${port_time1}" --text "${port_time2}" --list --radiolist --height=240 --column="${inst_set3}" --column "${port_time3}" \
            TRUE "${port_time4}" \
            FALSE "${port_time5}" \
            FALSE "${port_time6}" `
            if [ $? = 1 ] ; then 
                echo "1" > "${HOME}/.config/.PortTime"
            else
                case $xsd2 in
                    "${port_time4}")
                        if [ ! -z "$(command -v sensible-browser)" ]; then
                            sensible-browser "$urlg" &
                        elif [ ! -z "$(command -v xdg-open)" ]; then
                            xdg-open "$urlg" &
                        elif [ ! -z "$(command -v gnome-open)" ]; then
                            gnome-open "$urlg" &
                        elif [ ! -z "$(command -v python)" ]; then
                            python -m webbrowser "$urlg" 
                        fi &
                        echo "300" > "${HOME}/.config/.PortTime" 
                        sleep 5
                        exit 0 ;;
                    "${port_time5}")
                        echo "75" > "${HOME}/.config/.PortTime" ;;
                    "${port_time6}")
                        echo "150" > "${HOME}/.config/.PortTime" ;;
                esac 
            fi
    fi 
}

PW_CREATE_PFX () {
    #sed -i '/HKCU,Software\\Valve\\Steam/d' "${WINEDIR}"*/share/wine/wine.inf 
    #sed -i '/HKLM,Software\\Wow6432Node\\Valve\\Steam/d' "${WINEDIR}"*/share/wine/wine.inf 
    #sed -i '/HKLM,Software\\Wow6432Node\\Valve\\Steam/d' "${WINEDIR}"*/share/wine/wine.inf 
    if [ ! -d "${WINEPREFIX}" ] || [ ! -d "${WINEPREFIX}"/drive_c/windows ] || [ ! -f "${WINEPREFIX}"/user.reg ] || [ ! -f "${WINEPREFIX}"/userdef.reg ] || [ ! -f "${WINEPREFIX}"/system.reg ] ; then
        sed -i '/HKCR,steam\\shell\\open\\command/d' "${WINEDIR}"*/share/wine/wine.inf 
        sed -i '/HKCR,steam\\shell\\open\\command/d' "${WINEDIR}"*/share/wine/wine.inf 
        PW_STOP_PROGRESS_BAR
        ${PW_XTERM} "${PW_RUNTIME}" "${WINELOADER}" wineboot -u 
        `zenity --info --title "Info..." --text "   Updating prefix completed successfully.\n\n   Restart ${portname}." --no-wrap ` > /dev/null 2>&1  
        exit 0
    fi
    #sed -i '/steamclient/d' "${WINEPREFIX}"/*.reg 
    #sed -i '/SteamPath/d' "${WINEPREFIX}"/*.reg 
    }

PW_SCRIPTS_UPDATE () {
    if [ ! -f "${PORT_WINE_TMP_PATH}/scripts_ver" ] ; then
        echo "1000" > "${PORT_WINE_TMP_PATH}/scripts_ver"
    fi
    try_download "${PW_FTP_URL}/current_version/scripts_ver" "${PORT_WINE_TMP_PATH}/scripts_cur_ver" 
    if [ "$?" == "0" ] ; then
        read scripts_current_ver < "${PORT_WINE_TMP_PATH}/scripts_cur_ver"
        read scripts_install_ver < "${PORT_WINE_TMP_PATH}/scripts_ver"
        try_remove_file "${PORT_WINE_TMP_PATH}/scripts_cur_ver"
        if  [ "${scripts_current_ver}" -gt "${scripts_install_ver}" ] ; then	
            echo "######################################################"
            echo "Update scripts..."
            try_download "${PW_FTP_URL}/dist/scripts.tar.xz" "${PORT_WINE_TMP_PATH}/scripts.tar.xz"
            tar -Jxvf "${PORT_WINE_TMP_PATH}/scripts.tar.xz" -C "${PORT_WINE_PATH}/data/"
            if [ "$?" == "0" ] ; then
                try_remove_file "${PORT_WINE_TMP_PATH}/scripts.tar.xz"
                echo "${scripts_current_ver}" > "${PORT_WINE_TMP_PATH}/scripts_ver"
                `zenity --info --title "Info..." --text "   Updating scripts and database of games\n   and programs completed successfully.\n\n   Restart ${portname}." --no-wrap ` > /dev/null 2>&1  
                exit 0
            fi
        fi
    fi
}

PW_RUN () {
    if [ ! -z "$portwine_exe" ] ; then
        export PATH_TO_GAME="$( cd "$( dirname "${portwine_exe}" )" >/dev/null 2>&1 && pwd )"
        cd "$PATH_TO_GAME"
    else 
        cd "${WINEPREFIX}/drive_c"
    fi

    print_var "PATH_TO_GAME" "WINEDLLOVERRIDES" "PATH"

    if [ ! -z "${PW_GAMEMODERUN}" ] && [ "${PW_GAMEMODERUN}" != 0 ] ; then
        if [ ! -z ${optirun_on} ]; then
            echo "Full command line: ${optirun_on}  $PW_TERM "${PW_RUNTIME}" gamemoderun "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]}"
            ${optirun_on}  $PW_TERM "${PW_RUNTIME}" gamemoderun "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]} 
        else
            echo "Full command line: $PW_TERM "${PW_RUNTIME}" gamemoderun "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]}"
            $PW_TERM "${PW_RUNTIME}" gamemoderun "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]}
        fi
    else 
        if [ ! -z ${optirun_on} ]; then
            echo "Full command line: ${optirun_on}  $PW_TERM "${PW_RUNTIME}" "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]}"
            ${optirun_on}  $PW_TERM "${PW_RUNTIME}" "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]} 
        else
            echo "Full command line: $PW_TERM "${PW_RUNTIME}" "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]}"
            $PW_TERM "${PW_RUNTIME}" "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]}
        fi
    fi
}
