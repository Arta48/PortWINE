#!/bin/bash
# Author: Castro-Fidel (PortWINE-Linux.ru)
# Development assistants: Cefeiko; Rus_Nor; gavr; RidBowt; Dezert1r; Taz_mania; Anton_Famillianov
########################################################################
echo '
████─████─████─███─█───█─███─█──█─███
█──█─█──█─█──█──█──█───█──█──██─█─█
████─█──█─████──█──█─█─█──█──█─██─███
█────█──█─█─█───█──█████──█──█──█─█
█────████─█─█───█───█─█──███─█──█─███

'
if [ $(id -u) = 0 ] ; then
    echo "Do not run this script as root!"
    zenity --error --text "Do not run this script as root!"
    exit 1
fi
if [[ "${s_install}" != "1" && ! -x "`which "zenity" 2>/dev/null`" ]] ; then
    echo "You will need to install: zenity, and restart the port."
    xdg-open "http://portwine-linux.ru/portwine-faq/" > /dev/null 2>&1 & exit 0
fi
. "$(dirname $(readlink -f "$0"))/functions_helper"

start_portwine () {
    pw_check_and_download_wine "${PW_WINE_USE}" 
    init_wine_ver
    pw_download_mono
    pw_download_gecko
    pw_tray_icon &
    if [ -x "`which konsole 2>/dev/null`" ]; then export PW_TERM="konsole --nofork -e"
#    elif [ -x "`which gnome-terminal 2>/dev/null`" ]; then export PW_TERM="gnome-terminal -- /bin/bash" ???
    elif [ -x "`which lxterminal 2>/dev/null`" ]; then export PW_TERM="lxterminal -e"
    elif [ -x "`which xterm 2>/dev/null`" ]; then export PW_TERM="${PW_XTERM}"
    else export PW_TERM="${PW_XTERM}"
    fi
    if [ ! -f "${HOME}/.Xresources" ]; then
        cp -f "${PORT_SCRIPTS_PATH}/.Xresources" "${HOME}"
        xrdb -merge "${HOME}/.Xresources"
    fi

    pw_start_progress_bar_block "Start ${portname}... Please wait..."

    if [ "${PW_USE_GSTREAMER}" = 1 ] ; then 
        if [ -d "${WINEDIR}/lib64/gstreamer-1.0" ] ; then
            export GST_PLUGIN_SYSTEM_PATH_1_0="${WINEDIR}/lib64/gstreamer-1.0:${WINEDIR}/lib/gstreamer-1.0"
        fi
        export WINE_GST_REGISTRY_DIR="${PORT_WINE_TMP_PATH}"
        export MEDIACONV_AUDIO_DUMP_FILE="${PORT_WINE_TMP_PATH}"/audio.foz
        export MEDIACONV_AUDIO_TRANSCODED_FILE="${PORT_WINE_TMP_PATH}"/transcoded_audio.foz
        export MEDIACONV_VIDEO_DUMP_FILE="${PORT_WINE_TMP_PATH}"/video.foz
        export MEDIACONV_VIDEO_TRANSCODED_FILE="${PORT_WINE_TMP_PATH}"/transcoded_video.foz
    else
        var_winedlloverride_update "winegstreamer="
    fi
    export STAGING_SHARED_MEMORY=1
    export PW_FORCE_LARGE_ADDRESS_AWARE=1

    if [ "${PW_USE_RUNTIME}" = 0 ] ; then
        export pw_runtime=""
        if [ "${PW_MANGOHUD}" = 1 ] ; then
            [ -z `which mangohud` ] && export PW_MANGOHUD=0
        fi
        echo "RUNTIME is disabled"
    else
        declare -a container_args=()
        ld_preload="$LD_PRELOAD"
        for word in $ld_preload; do
            if [ -n "$word" ]; then
                container_args+=("--ld-preload=$word")
            fi
        done
        export PW_AND_RUNTIME_LIBRARY_PATH="/overrides/lib/x86_64-linux-gnu/:/overrides/lib/x86_64-linux-gnu/aliases/:/overrides/lib/i386-linux-gnu/:/overrides/lib/i386-linux-gnu/aliases/:"
        if [[ ! -z "${PW_SANDBOX_HOME_PATH}" && -d "${PW_SANDBOX_HOME_PATH}" ]]; then
            export pw_runtime="${PW_WINELIB}/pressure-vessel/bin/pressure-vessel-unruntime \
            --unshare-home \
            --home="${PW_SANDBOX_HOME_PATH}" \
            --runtime=${PW_WINELIB}/runtime \
            --env-if-host=LD_PRELOAD=$LD_PRELOAD "${container_args[@]}" \
            --"
        else
            export pw_runtime="${PW_WINELIB}/pressure-vessel/bin/pressure-vessel-unruntime \
            --share-home \
            --runtime=${PW_WINELIB}/runtime \
            --env-if-host=LD_PRELOAD=$LD_PRELOAD "${container_args[@]}" \
            --"
        fi

        export PRESSURE_VESSEL_COPY_RUNTIME=0
        export PRESSURE_VESSEL_VARIABLE_DIR="${PW_WINELIB}/runtime"
        export PRESSURE_VESSEL_REMOVE_GAME_OVERLAY=0
        export PRESSURE_VESSEL_IMPORT_VULKAN_LAYERS=1
        export PRESSURE_VESSEL_GC_RUNTIMES=0
        export PRESSURE_VESSEL_GC_LEGACY_RUNTIMES=1
        export PRESSURE_VESSEL_RUNTIME_BASE="${PW_WINELIB}"
        export PRESSURE_VESSEL_PREFIX="${PW_WINELIB}/pressure-vessel"
        unset PRESSURE_VESSEL_FILESYSTEMS_RO
        unset PRESSURE_VESSEL_FILESYSTEMS_RW
        for PWRTMRO in ${PW_RT_MOUNT_RO[*]} ; do
            if [ ! -z "${PRESSURE_VESSEL_FILESYSTEMS_RO}" ]
            then export PRESSURE_VESSEL_FILESYSTEMS_RO="${PRESSURE_VESSEL_FILESYSTEMS_RO}:${PWRTMRO}"
            else export PRESSURE_VESSEL_FILESYSTEMS_RO="${PWRTMRO}"
            fi
        done
        for PWRTMRW in ${PW_RT_MOUNT_RW[*]} ; do
            if [ ! -z "${PRESSURE_VESSEL_FILESYSTEMS_RW}" ]
            then export PRESSURE_VESSEL_FILESYSTEMS_RW="${PRESSURE_VESSEL_FILESYSTEMS_RW}:${PWRTMRW}"
            else export PRESSURE_VESSEL_FILESYSTEMS_RW="${PWRTMRW}"
            fi
        done
        if [ ! -f "${PW_WINELIB}/runtime/etc/os-release" ]
        then try_force_link_file "${PW_WINELIB}/runtime/lib/os-release" "${PW_WINELIB}/runtime/etc/os-release"
        fi
        echo "RUNTIME is enabled"
    fi

    if [[ ! -z "${PW_LOG}" && "${PW_LOG}" != 0 ]] ; then
        export WINEDEBUG="fixme-all,err+loaddll,err+dll,err+file,err+reg"
        export DXVK_LOG_LEVEL="info"
        export VKD3D_DEBUG="warn"
        export WINE_MONO_TRACE="E:System.NotImplementedException"
    else
        export WINEDEBUG="-all"
        export DXVK_LOG_LEVEL="none"
        export VKD3D_DEBUG="none"
        export DXVK_LOG_PATH="none"
    fi

    #default wine-mono override for FNA games
    export WINE_MONO_OVERRIDES="Microsoft.Xna.Framework.*,Gac=n"

    if [[ ! -z "${PW_NO_ESYNC}" && "${PW_NO_ESYNC}" != 0 ]]
    then export WINEESYNC="0"
    else export WINEESYNC="1"
    fi
    if [[ ! -z "${PW_NO_FSYNC}" && "${PW_NO_FSYNC}" != 0 ]] ; then
        export WINEFSYNC="0"
        export WINEFSYNC_FUTEX2="0"
    else
        export WINEFSYNC="1"
        export WINEFSYNC_FUTEX2="1"
    fi
    if [[ ! -z "${PW_FORCE_LARGE_ADDRESS_AWARE}" && "${PW_FORCE_LARGE_ADDRESS_AWARE}" != 0 ]]
    then export WINE_LARGE_ADDRESS_AWARE="1"
    else export WINE_LARGE_ADDRESS_AWARE="0"
    fi
    if [[ ! -z "${PW_OLD_GL_STRING}" && "${PW_OLD_GL_STRING}" != 0 ]] ; then
        export MESA_EXTENSION_MAX_YEAR="2003" #mesa override
        export __GL_ExtensionStringVersion="17700" #nvidia override
    fi
    if [[ ! -z "${PW_NO_WRITE_WATCH}" && "${PW_NO_WRITE_WATCH}" != 0 ]] ; then
        export WINE_DISABLE_WRITE_WATCH="1"
    fi
    if [[ ! -z "${PW_VULKAN_NO_ASYNC}" && "${PW_VULKAN_NO_ASYNC}" != 0 ]] ; then
        export RADV_DEBUG="llvm"
        var_vkd3d_config_update single_queue
    fi
    if [[ ! -z "${PW_USE_NVAPI_AND_DLSS_AND_DLSS}" && "${PW_USE_NVAPI_AND_DLSS_AND_DLSS}" == 1 && -d "${WINEDIR}/lib/wine/nvapi/" ]]
    then
        try_copy_file "${WINEDIR}/lib/wine/nvapi/nvapi.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
        try_copy_file "${WINEDIR}/lib64/wine/nvapi/nvapi64.dll" "${WINEPREFIX}/drive_c/windows/system32/"
        var_winedlloverride_update "nvapi,nvapi64=n;nvcuda=b"
        if [[ ! -f "${WINEPREFIX}/drive_c/windows/system32/nvngx.dll" || ! -f "${WINEPREFIX}/drive_c/windows/system32/_nvngx.dll" ]] ; then
            try_copy_file `find /usr/* -type f -name "nvngx.dll" 2>/dev/null | awk '{print $1}'` "${WINEPREFIX}/drive_c/windows/system32/"
            try_copy_file `find /usr/* -type f -name "_nvngx.dll" 2>/dev/null | awk '{print $1}'` "${WINEPREFIX}/drive_c/windows/system32/"       
        fi
    else
        var_winedlloverride_update "nvapi,nvapi64="
    fi
    if [[ ! -z "${PW_WINEDBG_DISABLE}" && "${PW_WINEDBG_DISABLE}" != 0 ]] ; then
        var_winedlloverride_update "winedbg.exe="
    fi
    if [[ ! -z "${PW_HIDE_NVIDIA_GPU}" && "${PW_HIDE_NVIDIA_GPU}" != 0 ]] ; then
        export WINE_HIDE_NVIDIA_GPU="1"
    fi
    if [[ ! -z "${PW_HEAP_DELAY_FREE}" && "${PW_HEAP_DELAY_FREE}" != 0 ]]
    then export WINE_HEAP_DELAY_FREE="1"
    else export WINE_HEAP_DELAY_FREE="0"
    fi
    if [[ ! -z "${PW_WINE_ALLOW_XIM}" && "${PW_WINE_ALLOW_XIM}" != 0 ]]
    then export WINE_ALLOW_XIM="1"
    else export WINE_ALLOW_XIM="0"
    fi
    if [[ ! -z "${PW_DXR_ON}" && "${PW_DXR_ON}" != 0 ]] ; then
        var_vkd3d_config_update dxr
    fi
    export optirun_on=""
    export check_optimus_manager=
    export PW_NVIDIA="$(lspci | grep NVIDIA)"
    if [ -x "`which optimus-manager 2>/dev/null`" ]; then
        export check_optimus_manager=`optimus-manager --status | grep Current | cut -f 2 -d':' | sed -e 's/^[[:space:]]*//'`
    fi
    if [[ ! -z "${PW_NVIDIA}" && "${check_optimus_manager}" != "intel" ]]; then
        if [ "${check_optimus_manager}" = "nvidia" ]; then
            export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json
        elif [ -x "`which primusrun 2>/dev/null`" ]; then
            export optirun_on="primusrun"
            export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json
        elif [ -x "`which optirun 2>/dev/null`" ]; then
            export optirun_on="optirun -b primus"
            export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json
        elif [ -x "`which prime-run 2>/dev/null`" ]; then
            export optirun_on="prime-run"
            export VK_ICD_FILENAMES=/usr/share/vulkan/icd.d/nvidia_icd.json
        fi
        export __NV_PRIME_RENDER_OFFLOAD=1
        export __GLX_VENDOR_LIBRARY_NAME=nvidia
        if [ ! -d "${PORT_WINE_TMP_PATH}"/gl_shader_cache ] ; then
            mkdir -p "${PORT_WINE_TMP_PATH}"/gl_shader_cache
        fi
    else
        export DRI_PRIME=1
    fi
    case "$PW_FORCE_USE_VSYNC" in  # 0-FORCE_OFF, 1-FORCE_ON, 2-BY_DEFAULT
        "0")
        export vblank_mode=0
        export __GL_SYNC_TO_VBLANK=0 ;;
        "1")
        export vblank_mode=1
        export __GL_SYNC_TO_VBLANK=1 ;;
    esac
    export DXVK_CONFIG_FILE="${PORT_WINE_PATH}/data/dxvk.conf"
    export int_xneur=0
    if [ $(pgrep xneur)>'0' ]; then
        killall xneur
        export int_xneur=1
    fi
    if [[ ! -z "${PW_XKBD_RU_HACK}" && "${PW_XKBD_RU_HACK}" == 1 ]] ; then
        export PW_XKBD="$(setxkbmap -query | grep -w ru | awk '{print($2)}')"
        if [ ! -z ${PW_XKBD} ]; then
            setxkbmap us,ru
        fi
    fi
    if [[ -x "`which "gamemoderun" 2>/dev/null`" && "$PW_USE_GAMEMODE" = "1" ]] ; then
        export PW_GAMEMODERUN=1
        echo "Gamemod will be launched."
    else
        export PW_GAMEMODERUN=0
        echo "Gamemod is not installed or disabled in vars script or db file: PW_USE_GAMEMODE=$PW_USE_GAMEMODE"
    fi
    #init_pfx
    if [[ ! -d "${WINEPREFIX}" || ! -d "${WINEPREFIX}"/drive_c/windows || ! -d "${WINEPREFIX}/dosdevices" || ! -f "${WINEPREFIX}"/userdef.reg || ! -f "${WINEPREFIX}"/system.reg || ! -f "${WINEPREFIX}"/user.reg ]]
    then
        pw_clear_pfx
        create_new_dir "${WINEPREFIX}"
        create_new_dir "${WINEPREFIX}/drive_c"
        create_new_dir "${WINEPREFIX}/dosdevices"
        create_new_dir "${WINEPREFIX}/drive_c/windows/syswow64/"
        create_new_dir "${WINEPREFIX}/drive_c/windows/system32/"
        [ ! -d "${WINEPREFIX}/dosdevices/c:" ] && try_force_link_dir "${WINEPREFIX}/drive_c/" "${WINEPREFIX}/dosdevices/c:"
        [ ! -d "${WINEPREFIX}/dosdevices/z:" ] && try_force_link_dir "/" "${WINEPREFIX}/dosdevices/z:"
        create_new_dir "${WINEPREFIX}/drive_c/windows/Fonts/"
        try_copy_file "${WINEDIR}/share/fonts/"LiberationSans-Regular.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"arial.ttf
        try_copy_file "${WINEDIR}/share/fonts/"LiberationSans-Bold.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"arialbd.ttf
        try_copy_file "${WINEDIR}/share/fonts/"LiberationSerif-Regular.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"times.ttf
        try_copy_file "${WINEDIR}/share/fonts/"LiberationMono-Regular.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"cour.ttf
        try_copy_file "${WINEDIR}/share/fonts/"SourceHanSansSCRegular.otf "${WINEPREFIX}/drive_c/windows/Fonts/"msyh.ttf
        pw_stop_progress_bar
        pw_start_progress_bar_block "Updating prefix... Please wait..."
        kill_portwine
        ${pw_runtime} env LD_LIBRARY_PATH="${PW_AND_RUNTIME_LIBRARY_PATH}${LD_LIBRARY_PATH}" "${WINELOADER}" wineboot -u
        wait_wineserver
        kill_portwine
    fi
    pw_stop_progress_bar
    pw_start_progress_bar_cs "Initialization prefix..."
    [ ! -d "${WINEPREFIX}/dosdevices/c:" ] && try_force_link_dir "${WINEPREFIX}/drive_c/" "${WINEPREFIX}/dosdevices/c:"
    [ ! -d "${WINEPREFIX}/dosdevices/z:" ] && try_force_link_dir "/" "${WINEPREFIX}/dosdevices/z:"
    create_new_dir "${WINEPREFIX}/drive_c/users/steamuser"
    if [ ! -d "${WINEPREFIX}/drive_c/users/${USER}" ]; then
	    try_force_link_dir "${WINEPREFIX}/drive_c/users/steamuser" "${WINEPREFIX}/drive_c/users/${USER}"
    fi
    [ ! -d "${PORT_WINE_PATH}/drive_c" ] && try_force_link_dir "${PORT_WINE_PATH}/data/pfx/drive_c/" "${PORT_WINE_PATH}/"
    create_new_dir "${WINEPREFIX}/drive_c/users/Public/Documents/Steam"
    create_new_dir "${WINEPREFIX}/drive_c/users/steamuser/Documents/Steam"
    if [ ! -d "${WINEPREFIX}/drive_c/users/steamuser/My Documents" ]
    then try_force_link_dir "${WINEPREFIX}/drive_c/users/steamuser/Documents" "${WINEPREFIX}/drive_c/users/steamuser/My Documents"
    fi
    var_winedlloverride_update "steam_api,steam_api64,steamclient,steamclient64=n;lsteamclient,GameOverlayRenderer,GameOverlayRenderer64,winemenubuilder.exe="

    # export TOTAL_VRAM=`"${PW_WINELIB}/runtime/bin/glxinfo" -B | grep Total | awk -F: '{print $2}' | awk '{print $1}'`
    # echo "TOTAL_VRAM=${TOTAL_VRAM}"
        
    [[ "${PW_VULKAN_USE}" = "vkd3d" ]] && export PW_VULKAN_USE=1

    echo "Try copy dxvk_config file"
    try_copy_file "${WINEDIR}/lib/wine/dxvk/dxvk_config.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
    try_copy_file "${WINEDIR}/lib64/wine/dxvk/dxvk_config.dll" "${WINEPREFIX}/drive_c/windows/system32/"
    
    if [[ "${PW_VULKAN_USE}" = "0" || "${PW_VULKAN_USE}" = "1" ]] ; then
        echo "Try copy native DXGI"
        if ! try_copy_file "${WINEDIR}"/lib/wine/fakedlls/dxgi.dll "${WINEPREFIX}/drive_c/windows/syswow64/"
        then try_copy_file "${WINEDIR}"/lib/wine/i386-windows/dxgi.dll "${WINEPREFIX}/drive_c/windows/syswow64/"
        fi
        if ! try_copy_file "${WINEDIR}"/lib64/wine/fakedlls/dxgi.dll "${WINEPREFIX}/drive_c/windows/system32/"
        then try_copy_file "${WINEDIR}"/lib64/wine/x86_64-windows/dxgi.dll "${WINEPREFIX}/drive_c/windows/system32/"
        fi
    fi
    if [ "${PW_VULKAN_USE}" = "0" ] ; then
        echo "Use OpenGL"
        export MESA_GLSL_CACHE_DIR="${PORT_WINE_TMP_PATH}"
        export __GLX_VENDOR_LIBRARY_NAME=nvidia
        export GL_YIELD="NOTHING"
        for wine_build_dll in d3d11 d3d10 d3d10core d3d10_1 d3d9 ; do
            if ! try_copy_file "${WINEDIR}/lib/wine/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
            then try_copy_file "${WINEDIR}/lib/wine/i386-windows/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
            fi
            if ! try_copy_file "${WINEDIR}/lib64/wine/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/"
            then try_copy_file "${WINEDIR}/lib64/wine/x86_64-windows/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/"
            fi
        done
        var_winedlloverride_update "d3d11,d3d10,d3d10core,d3d10_1,d3d9,dxgi=b"
    elif [ "${PW_VULKAN_USE}" = "1" ] ; then
        echo "Use VKD3D-PROTON and DXVK (DX12 to vulkan)"
        export CP_DXVK_FILES="d3d11 d3d10 d3d10core d3d10_1 d3d9"
        echo "Try copy native DXVK files"
        for wine_dxvk_dll in ${CP_DXVK_FILES} ; do
            try_copy_file "${WINEDIR}/lib/wine/dxvk/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
            try_copy_file "${WINEDIR}/lib64/wine/dxvk/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/"
            var_winedlloverride_update "${wine_dxvk_dll}=n"
        done
        echo "Try copy native VKD3D files"
        try_copy_file "${WINEDIR}/lib/vkd3d/libvkd3d-shader-1.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
        try_copy_file "${WINEDIR}/lib64/vkd3d/libvkd3d-shader-1.dll" "${WINEPREFIX}/drive_c/windows/system32/"
        for wine_vkd3d_dll in d3d12 libvkd3d-proton-utils-3 ; do
        try_copy_file "${WINEDIR}/lib/wine/vkd3d-proton/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
        try_copy_file "${WINEDIR}/lib64/wine/vkd3d-proton/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/"
        done  
        var_winedlloverride_update "d3d12=n;dxgi=b"
    else
        echo "Use DXVK only."
        export CP_DXVK_FILES="d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi"
        echo "Try copy native DXVK files"
        for wine_dxvk_dll in ${CP_DXVK_FILES} ; do
            try_copy_file "${WINEDIR}/lib/wine/dxvk/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
            try_copy_file "${WINEDIR}/lib64/wine/dxvk/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/"
            var_winedlloverride_update "${wine_dxvk_dll}=n"
        done
    fi
    create_new_dir "${PORT_WINE_TMP_PATH}/dxvk_cache"
    export DXVK_STATE_CACHE_PATH="${PORT_WINE_TMP_PATH}"/dxvk_cache
    export DXVK_STATE_CACHE=1
    export __GL_DXVK_OPTIMIZATIONS=1
    create_new_dir "${PORT_WINE_TMP_PATH}/gl_shader_cache"
    export __GL_SHADER_DISK_CACHE_PATH="${PORT_WINE_TMP_PATH}/gl_shader_cache"
    export __GL_SHADER_DISK_CACHE=1
    export __GL_SHADER_DISK_CACHE_SIZE=1000000000
    pw_other_fixes
    #run_winetricks_from_db
    update_winetricks
    if [ ! -z "${PW_MUST_HAVE_DLL}" ]
    then export PW_DLL_INSTALL="${PW_MUST_HAVE_DLL} ${PW_DLL_INSTALL}"
    fi
    if [ ! -z "${PW_DLL_INSTALL}" ]; then
        export PW_DLL_NEED_INSTALL=""
        export USE_WT_FROM_DB=0
        if [ ! -e "${WINEPREFIX}/winetricks.log" ] ; then
            touch "${WINEPREFIX}/winetricks.log"
        fi
        for need_install_dll_to_pfx in ${PW_DLL_INSTALL} ; do
            if [[ "${need_install_dll_to_pfx}" == "vcrun2015" || "${need_install_dll_to_pfx}" == "vcrun2017" ]] ; then
                need_install_dll_to_pfx="vcrun2019"
                sed -i '/vcrun2015/d' "${WINEPREFIX}/winetricks.log"
                sed -i '/vcrun2017/d' "${WINEPREFIX}/winetricks.log"
            elif [ "${need_install_dll_to_pfx}" == "vcrun2019" ] ; then
                sed -i '/vcrun2015/d' "${WINEPREFIX}/winetricks.log"
                sed -i '/vcrun2017/d' "${WINEPREFIX}/winetricks.log"
            fi
            grep "${need_install_dll_to_pfx}" "${WINEPREFIX}/winetricks.log"
            if [ "$?" == "1" ] ; then
                if [ -z "${PW_DLL_NEED_INSTALL}" ]
                then export PW_DLL_NEED_INSTALL="${need_install_dll_to_pfx}"
                else export PW_DLL_NEED_INSTALL="${need_install_dll_to_pfx} ${PW_DLL_NEED_INSTALL}"
                fi
                export USE_WT_FROM_DB=1
            fi
        done
        if [ "${USE_WT_FROM_DB}" == "1" ] ; then
            pw_stop_progress_bar
            print_info "Try to install DLL in prefix: ${PW_DLL_NEED_INSTALL}"
            chmod -R 775 "${HOME}/.cache/winetricks"
            if [ "${PW_WINE_VER}" != "PROTON_STEAM" ] ; then
                export PW_WINE_VER_FROM_DB="${PW_WINE_USE}"
                export PW_WINE_VER="PROTON_STEAM"
                init_wine_ver
                cabextract_fix
            fi
            ${pw_runtime} xterm -e env LD_LIBRARY_PATH="${PW_AND_RUNTIME_LIBRARY_PATH}${LD_LIBRARY_PATH}" \
            "${PORT_WINE_TMP_PATH}/winetricks" -q -r ${PW_DLL_NEED_INSTALL}
            if [ "${PW_WINE_VER_FROM_DB}" != "PROTON_STEAM" ] ; then
                /bin/bash -c ${pw_full_command_line[*]} &
                exit 0
            fi
        fi
    fi
    if [[ -z `cat "${WINEPREFIX}/system.reg" | grep "Windows $PW_WINDOWS_VER"` ]] ; then
        if [[ ! -z "${PW_WINDOWS_VER}" && `echo "$PW_WINDOWS_VER" | sed 's/.*/\L&/'` == "xp" ]] ; then
            export PW_WINDOWS_VER="xp64"
        fi
        ${pw_runtime} env LD_LIBRARY_PATH="${PW_AND_RUNTIME_LIBRARY_PATH}${LD_LIBRARY_PATH}" \
        "${WINELOADER}" winecfg -v `echo "win${PW_WINDOWS_VER}" | sed 's/.*/\L&/'`
        echo "Set to win${PW_WINDOWS_VER}"
        wait_wineserver
    fi
    add_in_start_portwine
    pw_stop_progress_bar
    pw_start_progress_bar_cs "Start ${portname}... Please wait..."
}

pw_run () {
    if [ ! -z "$portwine_exe" ] ; then
        if [ -z "$PATH_TO_GAME" ] ; then
            export PATH_TO_GAME="$( cd "$( dirname "${portwine_exe}" )" >/dev/null 2>&1 && pwd )"
        fi
        cd "${PATH_TO_GAME}"
    else
        cd "${WINEPREFIX}/drive_c"
    fi
    pw_mangohud_check
    pw_vkbasalt_check
    print_var "WINEDIR" "WINEPREFIX" "WINEDLLOVERRIDES" "PATH_TO_GAME" "PW_WINE_USE" "PW_VULKAN_USE" "VKD3D_CONFIG" "LD_LIBRARY_PATH" "PATH"
    if [ "${PW_LOG}" == 1 ] ; then
        export PW_LOG_TO_FILE="${PORT_WINE_PATH}/${portname}.log"
        if [[ ! -z "${PW_GAMEMODERUN}" && "${PW_GAMEMODERUN}" != 0 ]] ; then
            ${optirun_on} gamemoderun ${pw_runtime} env LD_LIBRARY_PATH="${PW_AND_RUNTIME_LIBRARY_PATH}${LD_LIBRARY_PATH}" \
            ${RUN_MANGOHUD} "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]} &>>"${PW_LOG_TO_FILE}"
        else
            ${optirun_on} ${pw_runtime} env LD_LIBRARY_PATH="${PW_AND_RUNTIME_LIBRARY_PATH}${LD_LIBRARY_PATH}" \
            ${RUN_MANGOHUD} "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]} &>>"${PW_LOG_TO_FILE}"
        fi
    else
        [ "${PW_USE_TERMINAL}" != "1" ] && export PW_TERM=""
        if [[ ! -z "${PW_GAMEMODERUN}" && "${PW_GAMEMODERUN}" != 0 ]] ; then
            $PW_TERM ${optirun_on} gamemoderun ${pw_runtime} env LD_LIBRARY_PATH="${PW_AND_RUNTIME_LIBRARY_PATH}${LD_LIBRARY_PATH}" \
            ${RUN_MANGOHUD} "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]}
        else
            $PW_TERM ${optirun_on} ${pw_runtime} env LD_LIBRARY_PATH="${PW_AND_RUNTIME_LIBRARY_PATH}${LD_LIBRARY_PATH}" \
            ${RUN_MANGOHUD} "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]}
        fi
    fi
}

###MAIN###
if [ $(id -u) -eq 0 ] ; then
    echo "Do not run the script from the superuser!"
    zenity --error --text "Do not run the script from the superuser!" 2> /dev/null  
    exit 1
fi
unset MANGOHUD MANGOHUD_DLSYM PW_NO_ESYNC PW_NO_FSYNC PW_VULKAN_USE WINEDLLOVERRIDES PW_NO_WRITE_WATCH PW_GUI_DISABLED_CS
unset PW_CHECK_AUTOINSTAL PW_VKBASALT_EFFECTS PW_VKBASALT_FFX_CAS PORTWINE_DB PORTWINE_DB_FILE PW_DISABLED_CREAT_DB PW_YAD_SET
unset CHK_SYMLINK_FILE
export portname=PortProton

cd "$(dirname "`readlink -f "$0"`")" && export PORT_SCRIPTS_PATH="$(pwd)"
cd "${PORT_SCRIPTS_PATH}/../../" && export PORT_WINE_PATH="$(pwd)"
export PORT_WINE_TMP_PATH="${PORT_WINE_PATH}/data/tmp"
if [ -d "${PORT_WINE_PATH}/data/dist" ] ; then
    chmod -R 755 "${PORT_WINE_PATH}/data/dist"
    orig_IFS="$IFS"
    IFS=$'\n'
    for dist_dir in $(ls -1 "${PORT_WINE_PATH}/data/dist/") ; do
        dist_dir_new=`echo "${dist_dir}" | awk '$1=$1' | sed -e s/[[:blank:]]/_/g`
        if [ ! -d "${PORT_WINE_PATH}/data/dist/${dist_dir_new^^}" ] ; then
            mv -- "${PORT_WINE_PATH}/data/dist/$dist_dir" "${PORT_WINE_PATH}/data/dist/${dist_dir_new^^}"
        fi
    done
    IFS="$orig_IFS"
fi

create_new_dir "${PORT_WINE_TMP_PATH}"/gecko
create_new_dir "${PORT_WINE_TMP_PATH}"/mono

if [ -d "${HOME}/.PortWINE/" ] ; then
    try_remove_dir "${HOME}/.PortWINE/tmp"
    mv -f "${HOME}/.PortWINE"/* "${PORT_WINE_TMP_PATH}"
    try_remove_dir "${HOME}/.PortWINE/"
fi 
cd "${PORT_SCRIPTS_PATH}"
. "${PORT_SCRIPTS_PATH}/var"

[ -f "${PORT_SCRIPTS_PATH}/autoinstall" ] && try_remove_file "${PORT_SCRIPTS_PATH}/autoinstall"

if [ ! -f "${PORT_WINE_TMP_PATH}/${portname}_loc" ] ; then
	SET_LANG=`zenity --title  "Install $portname" --text "Select the language" --list --radiolist \
	--column="Set:" --column "Language:" TRUE "RUS" FALSE "ENG" `
	echo "${SET_LANG}" > "${PORT_WINE_TMP_PATH}/${portname}_loc"
fi
. "${PORT_SCRIPTS_PATH}"/lang

export urlg="https://portwine-linux.ru/portwine-faq/"
export PW_WINELIB="${PORT_WINE_TMP_PATH}/libs${PW_LIBS_VER}"
export PW_GUI_ICON_PATH="${PORT_WINE_PATH}/data/img/gui"
export install_ver=`cat "${PORT_WINE_TMP_PATH}/${portname}_ver" | head -n 1`
export WINETRICKS_DOWNLOADER="curl"
export USER_CONF="${PORT_WINE_PATH}/data/user.conf"
check_user_conf

if [ -z "${INSTALLING_PORT}" ] ; then
    . "${USER_CONF}"
    pw_port_update
    pw_download_libs
    pw_init_db
    . "${USER_CONF}"
fi
