#!/bin/bash
# Author: Castro-Fidel (PortWINE-Linux.ru)
# Development assistants: Cefeiko; Dezert1r; Taz_mania; Anton_Famillianov; Rus_Nor; gavr; RidBowt; VHSgunzo; chal55rus
########################################################################
echo '
████─████─████─███─█───█─███─█──█─███
█──█─█──█─█──█──█──█───█──█──██─█─█
████─█──█─████──█──█─█─█──█──█─██─███
█────█──█─█─█───█──█████──█──█──█─█
█────████─█─█───█───█─█──███─█──█─███

'
if [ $(id -u) = 0 ] ; then
    echo "Do not run this script as root!"
    zenity --error --text "Do not run this script as root!"
    exit 1
fi
if [[ "${s_install}" != "1" && ! -x "`which "zenity" 2>/dev/null`" ]] ; then
    echo "You will need to install: zenity, and restart the port."
    xdg-open "http://portwine-linux.ru/portwine-faq/" > /dev/null 2>&1 & exit 0
fi
. "$(dirname $(readlink -f "$0"))/functions_helper"

start_portwine () {
    pw_check_and_download_wine "${PW_WINE_USE}" 
    init_wine_ver 
    if [ -x "`which konsole 2>/dev/null`" ]; then export PW_TERM="konsole --nofork -e"
#    elif [ -x "`which gnome-terminal 2>/dev/null`" ]; then export PW_TERM="gnome-terminal -- /bin/bash" ???
    elif [ -x "`which lxterminal 2>/dev/null`" ]; then export PW_TERM="lxterminal -e"
    elif [ -x "`which xterm 2>/dev/null`" ]; then export PW_TERM="${PW_XTERM}"
    else export PW_TERM="${PW_XTERM}"
    fi
    if [ ! -f "${HOME}/.Xresources" ]; then
        cp -f "${PORT_SCRIPTS_PATH}/.Xresources" "${HOME}"
        xrdb -merge "${HOME}/.Xresources"
    fi

    pw_update_pfx_cover_gui &

    if [[ ! -z "${LD_LIBRARY_PATH}" ]] ; then 
        if [[ -z "`echo ${LD_LIBRARY_PATH} | grep "${WINEDIR}/lib64:${WINEDIR}/lib"`" ]] ; then
            export LD_LIBRARY_PATH="${WINEDIR}/lib64:${WINEDIR}/lib:${PW_WINELIB}/portable/lib/\$LIB:${LD_LIBRARY_PATH}"
        fi
    else 
        export LD_LIBRARY_PATH="${WINEDIR}/lib64:${WINEDIR}/lib:${PW_WINELIB}/portable/lib/\$LIB"
    fi 
    if [[ ! -z "${VK_LAYER_PATH}" ]]
    then export VK_LAYER_PATH="${PW_WINELIB}/portable/share/vulkan/implicit_layer.d/:${VK_LAYER_PATH}"
    else export VK_LAYER_PATH="${PW_WINELIB}/portable/share/vulkan/implicit_layer.d/"
    fi
    if [ ! -z ${PATH_TMP} ]
    then export PATH="${PATH_TMP}"
    else export PATH_TMP="${PATH}"
    fi
    if [ ! -z "${PATH}" ]
    then export PATH="${WINEDIR}/bin:${PATH}:${PW_WINELIB}/portable/bin"
    else export PATH="${WINEDIR}/bin:${PW_WINELIB}/portable/bin"
    fi
    if [ "${PW_USE_GSTREAMER}" = 1 ] ; then 
        if [ -d "${WINEDIR}/lib64/gstreamer-1.0" ] ; then
            export GST_PLUGIN_SYSTEM_PATH_1_0="${WINEDIR}/lib64/gstreamer-1.0:${WINEDIR}/lib/gstreamer-1.0"
        fi
        export WINE_GST_REGISTRY_DIR="${PORT_WINE_TMP_PATH}"
        export MEDIACONV_AUDIO_DUMP_FILE="${PORT_WINE_TMP_PATH}"/audio.foz
        export MEDIACONV_AUDIO_TRANSCODED_FILE="${PORT_WINE_TMP_PATH}"/transcoded_audio.foz
        export MEDIACONV_VIDEO_DUMP_FILE="${PORT_WINE_TMP_PATH}"/video.foz
        export MEDIACONV_VIDEO_TRANSCODED_FILE="${PORT_WINE_TMP_PATH}"/transcoded_video.foz
    else
        var_winedlloverride_update "winegstreamer="
    fi
    export STAGING_SHARED_MEMORY=1
    export PW_FORCE_LARGE_ADDRESS_AWARE=1

    if [ "${PW_USE_RUNTIME}" = 0 ] ; then
        export pw_runtime=""
        if [ "${PW_MANGOHUD}" = 1 ] ; then
            [ -z `which mangohud` ] && export PW_MANGOHUD=0
        fi
        echo "RUNTIME is disabled"
    else
         if [[ ! -z "${PW_SANDBOX_HOME_PATH}" && -d "${PW_SANDBOX_HOME_PATH}" ]]; then
            export pw_runtime="${PW_WINELIB}/run \
            --unshare-home \
            --home="${PW_SANDBOX_HOME_PATH}" \
            --"
        else
            export pw_runtime="${PW_WINELIB}/run \
            --share-home \
            --"
        fi
        # export PRESSURE_VESSEL_VARIABLE_DIR="${PW_WINELIB}/runtime"
        export PRESSURE_VESSEL_REMOVE_GAME_OVERLAY=1
        export PRESSURE_VESSEL_IMPORT_VULKAN_LAYERS=1
        export PRESSURE_VESSEL_GC_RUNTIMES=0
        export PRESSURE_VESSEL_PREFIX="${PW_WINELIB}/pressure-vessel"
        unset PRESSURE_VESSEL_FILESYSTEMS_RO
        unset PRESSURE_VESSEL_FILESYSTEMS_RW
        for PWRTMRO in ${PW_RT_MOUNT_RO[*]} ; do
            if [ ! -z "${PRESSURE_VESSEL_FILESYSTEMS_RO}" ]
            then export PRESSURE_VESSEL_FILESYSTEMS_RO="${PRESSURE_VESSEL_FILESYSTEMS_RO}:${PWRTMRO}"
            else export PRESSURE_VESSEL_FILESYSTEMS_RO="${PWRTMRO}"
            fi
        done
        for PWRTMRW in ${PW_RT_MOUNT_RW[*]} ; do
            if [ ! -z "${PRESSURE_VESSEL_FILESYSTEMS_RW}" ]
            then export PRESSURE_VESSEL_FILESYSTEMS_RW="${PRESSURE_VESSEL_FILESYSTEMS_RW}:${PWRTMRW}"
            else export PRESSURE_VESSEL_FILESYSTEMS_RW="${PWRTMRW}"
            fi
        done
        #HOTFIX portable libs for Debian based OS
        [[ ! -d "${PW_WINELIB}/portable/lib/lib/i386-linux-gnu" ]] && ln -s "${PW_WINELIB}/portable/lib/lib32" "${PW_WINELIB}/portable/lib/lib/i386-linux-gnu"
        [[ ! -d "${PW_WINELIB}/portable/lib/lib/x86_64-linux-gnu" ]] && ln -s "${PW_WINELIB}/portable/lib/lib" "${PW_WINELIB}/portable/lib/lib/x86_64-linux-gnu"  
        echo "RUNTIME is enabled"
    fi

    if [[ ! -z "${PW_LOG}" && "${PW_LOG}" != 0 ]] ; then
        export WINEDEBUG="fixme-all,err+loaddll,err+dll,err+file,err+reg"
        export DXVK_LOG_LEVEL="info"
        export VKD3D_DEBUG="warn"
        export WINE_MONO_TRACE="E:System.NotImplementedException"
    else
        export WINEDEBUG="-all"
        export DXVK_LOG_LEVEL="none"
        export VKD3D_DEBUG="none"
        export DXVK_LOG_PATH="none"
    fi

    #default wine-mono override for FNA games
    export WINE_MONO_OVERRIDES="Microsoft.Xna.Framework.*,Gac=n"

    if [[ ! -z "${PW_NO_ESYNC}" && "${PW_NO_ESYNC}" != 0 ]]
    then export WINEESYNC="0"
    else export WINEESYNC="1"
    fi
    if [[ ! -z "${PW_NO_FSYNC}" && "${PW_NO_FSYNC}" != 0 ]] ; then
        export WINEFSYNC="0"
        export WINEFSYNC_FUTEX2="0"
    else
        export WINEFSYNC="1"
        export WINEFSYNC_FUTEX2="1"
    fi
    if [[ ! -z "${PW_FORCE_LARGE_ADDRESS_AWARE}" && "${PW_FORCE_LARGE_ADDRESS_AWARE}" != 0 ]]
    then export WINE_LARGE_ADDRESS_AWARE="1"
    else export WINE_LARGE_ADDRESS_AWARE="0"
    fi
    if [[ ! -z "${PW_OLD_GL_STRING}" && "${PW_OLD_GL_STRING}" != 0 ]] ; then
        export MESA_EXTENSION_MAX_YEAR="2003" #mesa override
        export __GL_ExtensionStringVersion="17700" #nvidia override
    fi
    if [[ ! -z "${PW_NO_WRITE_WATCH}" && "${PW_NO_WRITE_WATCH}" != 0 ]] ; then
        export WINE_DISABLE_WRITE_WATCH="1"
    fi
    if [[ ! -z "${PW_VULKAN_NO_ASYNC}" && "${PW_VULKAN_NO_ASYNC}" != 0 ]] ; then
        export RADV_DEBUG="llvm"
        var_vkd3d_config_update single_queue
    fi
    if [[ ! -z "${PW_USE_NVAPI_AND_DLSS}" && "${PW_USE_NVAPI_AND_DLSS}" == 1 && -d "${WINEDIR}/lib/wine/nvapi/" ]]
    then
        try_force_link_file "${PW_PLUGINS_PATH}/nvapi/x32/nvapi.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
        try_force_link_file "${PW_PLUGINS_PATH}/nvapi/x64/nvapi64.dll" "${WINEPREFIX}/drive_c/windows/system32/" 
        var_winedlloverride_update "nvapi,nvapi64,nvml=n;nvcuda=b"
        if [[ ! -f "${WINEPREFIX}/drive_c/windows/system32/nvngx.dll" || ! -f "${WINEPREFIX}/drive_c/windows/system32/_nvngx.dll" ]] ; then
            try_copy_file `find /usr/* -type f -name "nvngx.dll" 2>/dev/null | awk '{print $1}'` "${WINEPREFIX}/drive_c/windows/system32/"
            try_copy_file `find /usr/* -type f -name "_nvngx.dll" 2>/dev/null | awk '{print $1}'` "${WINEPREFIX}/drive_c/windows/system32/"       
        fi
        export DXVK_NVAPIHACK=0
    else
        var_winedlloverride_update "nvapi,nvapi64,nvml,nvcuda="
    fi
    if [[ ! -z "${PW_WINEDBG_DISABLE}" && "${PW_WINEDBG_DISABLE}" != 0 ]] ; then
        var_winedlloverride_update "winedbg.exe="
    fi
    if [[ ! -z "${PW_HIDE_NVIDIA_GPU}" && "${PW_HIDE_NVIDIA_GPU}" != 0 ]] ; then
        export WINE_HIDE_NVIDIA_GPU="1"
    fi
    if [[ ! -z "${PW_HEAP_DELAY_FREE}" && "${PW_HEAP_DELAY_FREE}" != 0 ]]
    then export WINE_HEAP_DELAY_FREE="1"
    else export WINE_HEAP_DELAY_FREE="0"
    fi
    if [[ ! -z "${PW_WINE_ALLOW_XIM}" && "${PW_WINE_ALLOW_XIM}" != 0 ]]
    then export WINE_ALLOW_XIM="1"
    else export WINE_ALLOW_XIM="0"
    fi
    [[ ! -z "${PW_MANGOHUD_USER_CONF}" && "${PW_MANGOHUD_USER_CONF}" != 0 ]] && unset MANGOHUD_CONFIG
    if [[ ! -z "${PW_USE_DXR11}" && "${PW_USE_DXR11}" != 0 ]]
    then var_vkd3d_config_update dxr11
    elif [[ ! -z "${PW_USE_DXR10}" && "${PW_USE_DXR10}" != 0 ]] 
    then var_vkd3d_config_update dxr
    fi

    export optirun_on=""
    export check_optimus_manager=
    export PW_NVIDIA="$(lspci | grep NVIDIA)"
    if [ -x "`which optimus-manager 2>/dev/null`" ]; then
        export check_optimus_manager=`optimus-manager --status | grep Current | cut -f 2 -d':' | sed -e 's/^[[:space:]]*//'`
    fi
    check_vk_icd_file () {
        if [[ -f "/usr/share/vulkan/icd.d/nvidia_icd.json" ]] ; then
            export VK_ICD_FILENAMES="/usr/share/vulkan/icd.d/nvidia_icd.json"
        elif [[ -f "/etc/vulkan/icd.d/nvidia_icd.json" ]] ; then
            export VK_ICD_FILENAMES="/etc/vulkan/icd.d/nvidia_icd.json"
        fi
    }
    if [[ ! -z "${PW_NVIDIA}" && "${check_optimus_manager}" != "intel" ]] ; then
        if [ "${check_optimus_manager}" = "nvidia" ]; then
            check_vk_icd_file
        elif [ -x "`which primusrun 2>/dev/null`" ]; then
            export optirun_on="primusrun"
            check_vk_icd_file
        elif [ -x "`which optirun 2>/dev/null`" ]; then
            export optirun_on="optirun -b primus"
            check_vk_icd_file
        elif [ -x "`which prime-run 2>/dev/null`" ]; then
            export optirun_on="prime-run"
            check_vk_icd_file
        elif [[ -x "`which nvidia-settings 2>/dev/null`" ]] ; then 
            export __NV_PRIME_RENDER_OFFLOAD=1
            export __GLX_VENDOR_LIBRARY_NAME=nvidia
            check_vk_icd_file
        fi
        #try link nvml.dll.so to prefix
        try_force_link_file "${PW_PLUGINS_PATH}"/nvml/lib/wine/nvml.dll.so "${WINEPREFIX}/drive_c/windows/syswow64/nvml.dll"
        try_force_link_file "${PW_PLUGINS_PATH}"/nvml/lib64/wine/nvml.dll.so "${WINEPREFIX}/drive_c/windows/syswow64/nvml.dll"
    else
        export DRI_PRIME=1
    fi
    case "$PW_FORCE_USE_VSYNC" in  # 0-FORCE_OFF, 1-FORCE_ON, 2-BY_DEFAULT
        "0")
        unset vblank_mode
        unset __GL_SYNC_TO_VBLANK ;;
        "1")
        export vblank_mode=1
        export __GL_SYNC_TO_VBLANK=1 ;;
    esac
    create_new_dir "${PORT_WINE_TMP_PATH}"/gl_shader_cache
    export DXVK_CONFIG_FILE="${PORT_WINE_PATH}/data/dxvk.conf"
    export int_xneur=0
    if [[ ! -z "`pgrep xneur`" ]]; then
        killall xneur
        export int_xneur=1
    fi
    if [[ ! -z "${PW_XKBD_RU_HACK}" && "${PW_XKBD_RU_HACK}" == 1 ]] ; then
        export PW_XKBD="$(setxkbmap -query | grep -w ru | awk '{print($2)}')"
        if [ ! -z ${PW_XKBD} ]; then
            setxkbmap us,ru
        fi
    fi
    if [[ -x "`which "gamemoderun" 2>/dev/null`" && "$PW_USE_GAMEMODE" = "1" && -z "`cat /etc/os-release | grep -i "red hat"`" ]] ; then
        export PW_GAMEMODERUN=1
        echo "Gamemod will be launched."
    else
        export PW_GAMEMODERUN=0
        echo "Gamemod is not installed or disabled in vars script or db file: PW_USE_GAMEMODE=$PW_USE_GAMEMODE"
    fi
    pw_vkbasalt_check
    pw_other_fixes
    #init_pfx
    check_dirs_and_files_in_pfx () {
        create_new_dir "${WINEPREFIX}"
        create_new_dir "${WINEPREFIX}/drive_c"
        create_new_dir "${WINEPREFIX}/dosdevices"
        create_new_dir "${WINEPREFIX}/drive_c/windows/syswow64/"
        create_new_dir "${WINEPREFIX}/drive_c/windows/system32/"
        [ ! -d "${WINEPREFIX}/dosdevices/c:" ] && try_force_link_dir "${WINEPREFIX}/drive_c/" "${WINEPREFIX}/dosdevices/c:"
        [ ! -d "${WINEPREFIX}/dosdevices/z:" ] && try_force_link_dir "/" "${WINEPREFIX}/dosdevices/z:"
        create_new_dir "${WINEPREFIX}/drive_c/windows/Fonts/"
        try_force_link_file "${WINEDIR}/share/fonts/"LiberationSans-Regular.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"arial.ttf
        try_force_link_file "${WINEDIR}/share/fonts/"LiberationSans-Bold.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"arialbd.ttf
        try_force_link_file "${WINEDIR}/share/fonts/"LiberationSerif-Regular.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"times.ttf
        try_force_link_file "${WINEDIR}/share/fonts/"LiberationMono-Regular.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"cour.ttf
        try_force_link_file "${WINEDIR}/share/fonts/"LiberationMono-Bold.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"courbd.ttf
        try_force_link_file "${WINEDIR}/share/fonts/"msyh.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"msyh.ttf
        try_force_link_file "${WINEDIR}/share/fonts/"malgun.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"malgun.ttf
        try_force_link_file "${WINEDIR}/share/fonts/"micross.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"micross.ttf
        try_force_link_file "${WINEDIR}/share/fonts/"nirmala.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"nirmala.ttf

        try_force_link_file "${WINEDIR}/share/fonts/"simsun.ttc "${WINEPREFIX}/drive_c/windows/Fonts/"simsun.ttc
        try_force_link_file "${WINEDIR}/share/fonts/"msgothic.ttc "${WINEPREFIX}/drive_c/windows/Fonts/"msgothic.ttc
        
        try_force_link_file "${WINEDIR}/share/wine/fonts/"tahoma.ttf "${WINEPREFIX}/drive_c/windows/Fonts/"tahoma.ttf
    }
    if [[ ! -d "${WINEPREFIX}" || ! -d "${WINEPREFIX}"/drive_c/windows || ! -d "${WINEPREFIX}/dosdevices" || \
    ! -f "${WINEPREFIX}"/userdef.reg || ! -f "${WINEPREFIX}"/system.reg || ! -f "${WINEPREFIX}"/user.reg ]]
    then
        pw_clear_pfx
        OLD_PW_WINE_USE="${PW_WINE_USE}"
        export PW_WINE_USE=${PW_PROTON_STEAM_VER}
        init_wine_ver
        check_dirs_and_files_in_pfx
        ${pw_runtime} env LD_LIBRARY_PATH="${LD_LIBRARY_PATH}" "${WINELOADER}" wineboot -i &>>"${PORT_WINE_TMP_PATH}/update_pfx_log"
        wait_wineserver &&
        export PW_WINE_USE="${OLD_PW_WINE_USE}"
        init_wine_ver
        echo "${PW_WINE_USE}" > "${WINEPREFIX}/.wine_ver"
    elif [[ -z "`cat ${WINEPREFIX}/.wine_ver | grep ${PW_WINE_USE}`" ]] ; then 
        check_dirs_and_files_in_pfx
        ${pw_runtime} env LD_LIBRARY_PATH="${LD_LIBRARY_PATH}" "${WINELOADER}" wineboot -i &>>"${PORT_WINE_TMP_PATH}/update_pfx_log"
        wait_wineserver &&
        echo "${PW_WINE_USE}" > "${WINEPREFIX}/.wine_ver"
    fi
    [ ! -d "${WINEPREFIX}/dosdevices/c:" ] && try_force_link_dir "${WINEPREFIX}/drive_c/" "${WINEPREFIX}/dosdevices/c:"
    [ ! -d "${WINEPREFIX}/dosdevices/z:" ] && try_force_link_dir "/" "${WINEPREFIX}/dosdevices/z:"
    create_new_dir "${WINEPREFIX}/drive_c/users/steamuser"
    if [ ! -d "${WINEPREFIX}/drive_c/users/${USER}" ]; then
	    try_force_link_dir "${WINEPREFIX}/drive_c/users/steamuser" "${WINEPREFIX}/drive_c/users/${USER}"
    fi
    [ ! -d "${PORT_WINE_PATH}/drive_c" ] && try_force_link_dir "${PORT_WINE_PATH}/data/pfx/drive_c/" "${PORT_WINE_PATH}/"
    create_new_dir "${WINEPREFIX}/drive_c/users/Public/Documents/Steam"
    create_new_dir "${WINEPREFIX}/drive_c/users/steamuser/Documents/Steam"
    if [ ! -d "${WINEPREFIX}/drive_c/users/steamuser/My Documents" ]
    then try_force_link_dir "${WINEPREFIX}/drive_c/users/steamuser/Documents" "${WINEPREFIX}/drive_c/users/steamuser/My Documents"
    fi
    #try copy and link Battle Eye libs
    try_copy_file "${PW_PLUGINS_PATH}"/BattlEye_Runtime/v1/lib/wine/fakedlls/beclient.dll "${WINEPREFIX}/drive_c/windows/syswow64/"
    try_copy_file "${PW_PLUGINS_PATH}"/BattlEye_Runtime/v1/lib64/wine/fakedlls/beclient_x64.dll "${WINEPREFIX}/drive_c/windows/system32/"
    if [[ ! -d "${WINEDIR}"/lib/wine/i386-unix ]]
    then try_force_link_file "${PW_PLUGINS_PATH}"/BattlEye_Runtime/v1/lib/wine/beclient.dll.so "${WINEDIR}"/lib/wine/
    else try_force_link_file "${PW_PLUGINS_PATH}"/BattlEye_Runtime/v1/lib/wine/beclient.dll.so "${WINEDIR}"/lib/wine/i386-unix/
    fi
    if [[ ! -d "${WINEDIR}"/lib64/wine/x86_64-unix ]]
    then try_force_link_file "${PW_PLUGINS_PATH}"/BattlEye_Runtime/v1/lib64/wine/beclient_x64.dll.so "${WINEDIR}"/lib64/wine/
    else try_force_link_file "${PW_PLUGINS_PATH}"/BattlEye_Runtime/v1/lib64/wine/beclient_x64.dll.so "${WINEDIR}"/lib64/wine/x86_64-unix/
    fi
    try_force_link_file "${PW_PLUGINS_PATH}"/BattlEye_Runtime/BEClient.so "${WINEDIR}"/lib
    try_force_link_file "${PW_PLUGINS_PATH}"/BattlEye_Runtime/BEClient_x64.so "${WINEDIR}"/lib64
    var_winedlloverride_update "beclient,beclient_x64=b,n"
    #try link d3d extras libs
    for d3d_extras_from_plugins in d3dcompiler_43 d3dx9_27 d3dx9_32 d3dx9_37 d3dx9_42 d3dcompiler_47 d3dx9_28 \
        d3dx9_33 d3dx9_38 d3dx9_43 d3dx9_24 d3dx9_29 d3dx9_34 d3dx9_39 d3dx9_25 d3dx9_30 d3dx9_35 d3dx9_40 d3dx9_26 \
        d3dx9_31 d3dx9_36 d3dx9_41 
    do  
        try_force_link_file "${PW_PLUGINS_PATH}/d3d_extras/x64/${d3d_extras_from_plugins}.dll" "${WINEPREFIX}/drive_c/windows/system32/"
        try_force_link_file "${PW_PLUGINS_PATH}/d3d_extras/x32/${d3d_extras_from_plugins}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/"
        var_winedlloverride_update "${d3d_extras_from_plugins}=n"
    done
    var_winedlloverride_update "steam_api,steam_api64,steamclient,steamclient64=n;lsteamclient,winemenubuilder.exe="

    # export TOTAL_VRAM=`"${PW_WINELIB}/runtime/files/bin/glxinfo" -B | grep Total | awk -F: '{print $2}' | awk '{print $1}'`
    # echo "TOTAL_VRAM=${TOTAL_VRAM}"

    if [[ "${PW_VULKAN_USE}" = "0" ]] ; then
        echo "Use OpenGL"
        export MESA_GLSL_CACHE_DIR="${PORT_WINE_TMP_PATH}"
        export GL_YIELD="NOTHING"
        echo "Try link wine DXGI..."
        if ! try_force_link_file "${WINEDIR}"/lib/wine/fakedlls/dxgi.dll "${WINEPREFIX}/drive_c/windows/syswow64/dxgi.dll"
        then try_force_link_file "${WINEDIR}"/lib/wine/i386-windows/dxgi.dll "${WINEPREFIX}/drive_c/windows/syswow64/dxgi.dll"
        fi
        if ! try_force_link_file "${WINEDIR}"/lib64/wine/fakedlls/dxgi.dll "${WINEPREFIX}/drive_c/windows/system32/dxgi.dll"
        then try_force_link_file "${WINEDIR}"/lib64/wine/x86_64-windows/dxgi.dll "${WINEPREFIX}/drive_c/windows/system32/dxgi.dll"
        fi
        echo "Try link wine d3d filese..."
        for wine_build_dll in d3d11 d3d10 d3d10core d3d10_1 d3d9 ; do
            if ! try_force_link_file "${WINEDIR}/lib/wine/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/${wine_build_dll}.dll"
            then try_force_link_file "${WINEDIR}/lib/wine/i386-windows/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/${wine_build_dll}.dll"
            fi
            if ! try_force_link_file "${WINEDIR}/lib64/wine/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/${wine_build_dll}.dll"
            then try_force_link_file "${WINEDIR}/lib64/wine/x86_64-windows/${wine_build_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/${wine_build_dll}.dll"
            fi
        done
        var_winedlloverride_update "d3d11,d3d10,d3d10core,d3d10_1,d3d9,dxgi=b;d3d12="
    else
        echo "Use VKD3D-PROTON and DXVK (DX 9-12 to vulkan)"
        export CP_DXVK_FILES="d3d11 d3d10 d3d10core d3d10_1 d3d9 dxgi dxvk_config"
        echo "Try link native DXVK files..."
        for wine_dxvk_dll in ${CP_DXVK_FILES} ; do
            try_force_link_file "${WINEDIR}/lib/wine/dxvk/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/${wine_dxvk_dll}.dll"
            try_force_link_file "${WINEDIR}/lib64/wine/dxvk/${wine_dxvk_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/${wine_dxvk_dll}.dll"
        done
        if [[ ! -z "${PW_USE_WINE_DXGI}" && "${PW_USE_WINE_DXGI}" != 0 ]] ; then 
            echo "Try link wine DXGI..."
            if ! try_force_link_file "${WINEDIR}"/lib/wine/fakedlls/dxgi.dll "${WINEPREFIX}/drive_c/windows/syswow64/dxgi.dll"
            then try_force_link_file "${WINEDIR}"/lib/wine/i386-windows/dxgi.dll "${WINEPREFIX}/drive_c/windows/syswow64/dxgi.dll"
            fi
            if ! try_force_link_file "${WINEDIR}"/lib64/wine/fakedlls/dxgi.dll "${WINEPREFIX}/drive_c/windows/system32/dxgi.dll"
            then try_force_link_file "${WINEDIR}"/lib64/wine/x86_64-windows/dxgi.dll "${WINEPREFIX}/drive_c/windows/system32/dxgi.dll"
            fi
            var_winedlloverride_update "d3d11,d3d10,d3d10core,d3d10_1,d3d9,dxvk_config=n;dxgi=b"
        else
            var_winedlloverride_update "d3d11,d3d10,d3d10core,d3d10_1,d3d9,dxgi,dxvk_config=n"
        fi        
        echo "Try link native VKD3D files..."
        try_force_link_file "${WINEDIR}/lib/vkd3d/libvkd3d-shader-1.dll" "${WINEPREFIX}/drive_c/windows/syswow64/libvkd3d-shader-1.dll"
        try_force_link_file "${WINEDIR}/lib64/vkd3d/libvkd3d-shader-1.dll" "${WINEPREFIX}/drive_c/windows/system32/libvkd3d-shader-1.dll"
        for wine_vkd3d_dll in d3d12 libvkd3d-proton-utils-3 ; do
            try_force_link_file "${WINEDIR}/lib/wine/vkd3d-proton/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/syswow64/${wine_vkd3d_dll}.dll"
            try_force_link_file "${WINEDIR}/lib64/wine/vkd3d-proton/${wine_vkd3d_dll}.dll" "${WINEPREFIX}/drive_c/windows/system32/${wine_vkd3d_dll}.dll"
        done
        if [[ ! -z "${PW_DX12_DISABLE}" && "${PW_DX12_DISABLE}" != 0 ]]  
        then var_winedlloverride_update "libvkd3d-proton-utils-3,libvkd3d-shader-1=n;d3d12="
        else var_winedlloverride_update "d3d12,libvkd3d-proton-utils-3,libvkd3d-shader-1=n"
        fi
    fi
    create_new_dir "${PORT_WINE_TMP_PATH}/dxvk_cache"
    export DXVK_STATE_CACHE_PATH="${PORT_WINE_TMP_PATH}"/dxvk_cache
    export DXVK_STATE_CACHE=1
    export __GL_DXVK_OPTIMIZATIONS=1
    create_new_dir "${PORT_WINE_TMP_PATH}/gl_shader_cache"
    export __GL_SHADER_DISK_CACHE_PATH="${PORT_WINE_TMP_PATH}/gl_shader_cache"
    export __GL_SHADER_DISK_CACHE=1
    export __GL_SHADER_DISK_CACHE_SIZE=1000000000
    #run_winetricks_from_db
    if [ ! -z "${PW_MUST_HAVE_DLL}" ]
    then export PW_DLL_INSTALL="${PW_MUST_HAVE_DLL} ${PW_DLL_INSTALL}"
    fi
    if [ ! -z "${PW_DLL_INSTALL}" ]; then
        export PW_DLL_NEED_INSTALL=""
        export USE_WT_FROM_DB=0
        if [ ! -e "${WINEPREFIX}/winetricks.log" ] ; then
            touch "${WINEPREFIX}/winetricks.log"
        fi
        for need_install_dll_to_pfx in ${PW_DLL_INSTALL} ; do
            if [[ "${need_install_dll_to_pfx}" == "vcrun2015" || "${need_install_dll_to_pfx}" == "vcrun2017" ]] ; then
                need_install_dll_to_pfx="vcrun2019"
                sed -i '/vcrun2015/d' "${WINEPREFIX}/winetricks.log"
                sed -i '/vcrun2017/d' "${WINEPREFIX}/winetricks.log"
            elif [ "${need_install_dll_to_pfx}" == "vcrun2019" ] ; then
                sed -i '/vcrun2015/d' "${WINEPREFIX}/winetricks.log"
                sed -i '/vcrun2017/d' "${WINEPREFIX}/winetricks.log"
            fi
            grep "${need_install_dll_to_pfx}" "${WINEPREFIX}/winetricks.log"
            if [ "$?" == "1" ] ; then
                if [ -z "${PW_DLL_NEED_INSTALL}" ]
                then export PW_DLL_NEED_INSTALL="${need_install_dll_to_pfx}"
                else export PW_DLL_NEED_INSTALL="${need_install_dll_to_pfx} ${PW_DLL_NEED_INSTALL}" 
                fi
                export USE_WT_FROM_DB=1
            fi
        done
        if [ "${USE_WT_FROM_DB}" == "1" ] ; then
            update_winetricks
            echo "START WINETRICKS..." >> "${PORT_WINE_TMP_PATH}/update_pfx_log"
            echo "Try to install DLL in prefix: ${PW_DLL_NEED_INSTALL}" >> "${PORT_WINE_TMP_PATH}/update_pfx_log"
            print_info "Try to install DLL in prefix: ${PW_DLL_NEED_INSTALL}"
            chmod -R 775 "${HOME}/.cache/winetricks"
            if [ "${PW_WINE_VER}" != "${PW_PROTON_STEAM_VER}" ] ; then
                export PW_WINE_VER_FROM_DB="${PW_WINE_USE}"
                export PW_WINE_VER="${PW_PROTON_STEAM_VER}"
                init_wine_ver
            fi
            ${pw_runtime} env PATH="${PATH}" LD_LIBRARY_PATH="${LD_LIBRARY_PATH}" \
            "${PORT_WINE_TMP_PATH}/winetricks" -q -r ${PW_DLL_NEED_INSTALL} &>>"${PORT_WINE_TMP_PATH}/update_pfx_log"
            if [ "${PW_WINE_VER_FROM_DB}" != "${PW_PROTON_STEAM_VER}" ] ; then
                export PW_SILENT_RESTART=1
                /bin/bash -c ${pw_full_command_line[*]} &
                exit 0
            fi
        fi
    fi
    if [[ -z `cat "${WINEPREFIX}/system.reg" | grep "Windows $PW_WINDOWS_VER"` ]] ; then
        if [[ ! -z "${PW_WINDOWS_VER}" && `echo "$PW_WINDOWS_VER" | sed 's/.*/\L&/'` == "xp" ]] ; then
            export PW_WINDOWS_VER="xp64"
        fi
        ${pw_runtime} env PATH="${PATH}" LD_LIBRARY_PATH="${LD_LIBRARY_PATH}" \
        "${WINELOADER}" winecfg -v `echo "win${PW_WINDOWS_VER}" | sed 's/.*/\L&/'`
        wait_wineserver &&
        echo "Set to win${PW_WINDOWS_VER}"
    fi
    pw_stop_progress_bar &&
    pw_tray_icon
    pw_start_progress_bar_cover "${PW_GUI_ICON_PATH}/covers/pw_loading_cover.gif"
    add_in_start_portwine
}

pw_run () {
    if [ ! -z "$portwine_exe" ] ; then
        if [ -z "$PATH_TO_GAME" ] ; then
            export PATH_TO_GAME="$( cd "$( dirname "${portwine_exe}" )" >/dev/null 2>&1 && pwd )"
        fi
        cd "${PATH_TO_GAME}"
    else
        cd "${WINEPREFIX}/drive_c"
    fi
    pw_mangohud_check
    print_var "WINEDIR" "WINEPREFIX" "WINEDLLOVERRIDES" "PATH_TO_GAME" "PW_WINE_USE" "PW_VULKAN_USE" "VKD3D_CONFIG" "LD_LIBRARY_PATH" "PATH"
    if [ "${PW_LOG}" == 1 ] ; then
        export PW_LOG_TO_FILE="${PORT_WINE_PATH}/${portname}.log"
        if [[ ! -z "${PW_GAMEMODERUN}" && "${PW_GAMEMODERUN}" != 0 ]] ; then
            ${optirun_on} gamemoderun ${pw_runtime} env VK_LAYER_PATH="${VK_LAYER_PATH}" PATH="${PATH}" LD_LIBRARY_PATH="${LD_LIBRARY_PATH}" \
            ${RUN_MANGOHUD} "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]} &>>"${PW_LOG_TO_FILE}"
        else
            ${optirun_on} ${pw_runtime} env VK_LAYER_PATH="${VK_LAYER_PATH}" PATH="${PATH}" LD_LIBRARY_PATH="${LD_LIBRARY_PATH}" \
            ${RUN_MANGOHUD} "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]} &>>"${PW_LOG_TO_FILE}"
        fi
    else
        [ "${PW_USE_TERMINAL}" != "1" ] && export PW_TERM=""
        if [[ ! -z "${PW_GAMEMODERUN}" && "${PW_GAMEMODERUN}" != 0 ]] ; then
            $PW_TERM ${optirun_on} gamemoderun ${pw_runtime} env VK_LAYER_PATH="${VK_LAYER_PATH}" PATH="${PATH}" LD_LIBRARY_PATH="${LD_LIBRARY_PATH}" \
            ${RUN_MANGOHUD} "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]}
        else
            $PW_TERM ${optirun_on} ${pw_runtime} env VK_LAYER_PATH="${VK_LAYER_PATH}" PATH="${PATH}" LD_LIBRARY_PATH="${LD_LIBRARY_PATH}" \
            ${RUN_MANGOHUD} "${WINELOADER}" "$@" ${LAUNCH_PARAMETERS[*]}
        fi
    fi
}
export -f pw_run

###MAIN###
if [ $(id -u) -eq 0 ] ; then
    echo "Do not run the script from the superuser!"
    zenity --error --text "Do not run the script from the superuser!" 2> /dev/null  
    exit 1
fi
if [[ ! -z "${PW_SILENT_RESTART}" && "${PW_SILENT_RESTART}" = 1 ]] ; then
    export PW_GUI_DISABLED_CS=1
    unset PW_SILENT_RESTART
else
    unset PW_GUI_DISABLED_CS
fi
unset MANGOHUD MANGOHUD_DLSYM PW_NO_ESYNC PW_NO_FSYNC PW_VULKAN_USE WINEDLLOVERRIDES PW_NO_WRITE_WATCH PW_YAD_SET
unset PW_CHECK_AUTOINSTAL PW_VKBASALT_EFFECTS PW_VKBASALT_FFX_CAS PORTWINE_DB PORTWINE_DB_FILE PW_DISABLED_CREATE_DB
unset CHK_SYMLINK_FILE
export portname=PortProton

cd "$(dirname "`readlink -f "$0"`")" && export PORT_SCRIPTS_PATH="$(pwd)"
cd "${PORT_SCRIPTS_PATH}/../../" && export PORT_WINE_PATH="$(pwd)"
export PORT_WINE_TMP_PATH="${PORT_WINE_PATH}/data/tmp"
rm -f "${PORT_WINE_TMP_PATH}"/*.tar.*

if [ -d "${PORT_WINE_PATH}/data/dist" ] ; then
    chmod -R 755 "${PORT_WINE_PATH}/data/dist"
    orig_IFS="$IFS"
    IFS=$'\n'
    for dist_dir in $(ls -1 "${PORT_WINE_PATH}/data/dist/") ; do
        dist_dir_new=`echo "${dist_dir}" | awk '$1=$1' | sed -e s/[[:blank:]]/_/g`
        if [ ! -d "${PORT_WINE_PATH}/data/dist/${dist_dir_new^^}" ] ; then
            mv -- "${PORT_WINE_PATH}/data/dist/$dist_dir" "${PORT_WINE_PATH}/data/dist/${dist_dir_new^^}"
        fi
    done
    IFS="$orig_IFS"
    try_remove_dir "${PORT_WINE_PATH}/data/dist/PROTON_STEAM"
    try_remove_dir "${PORT_WINE_PATH}/data/dist/PROTON_GE"
fi

create_new_dir "${PORT_WINE_TMP_PATH}"/gecko
create_new_dir "${PORT_WINE_TMP_PATH}"/mono

cd "${PORT_SCRIPTS_PATH}"
. "${PORT_SCRIPTS_PATH}/var"

export PW_PLUGINS_PATH="${PORT_WINE_TMP_PATH}/plugins${PW_PLUGINS_VER}"  

if [ ! -f "${PORT_WINE_TMP_PATH}/${portname}_loc" ] ; then
	SET_LANG=`zenity --title  "Install $portname" --text "Select the language" --list --radiolist \
	--column="Set:" --column "Language:" TRUE "RUS" FALSE "ENG" `
	echo "${SET_LANG}" > "${PORT_WINE_TMP_PATH}/${portname}_loc"
fi
. "${PORT_SCRIPTS_PATH}"/lang

export urlg="https://portwine-linux.ru/portwine-faq/"
export PW_WINELIB="${PORT_WINE_TMP_PATH}/libs${PW_LIBS_VER}"
try_remove_dir "${PW_WINELIB}/var"
export PW_GUI_ICON_PATH="${PORT_WINE_PATH}/data/img/gui"
export install_ver=`cat "${PORT_WINE_TMP_PATH}/${portname}_ver" | head -n 1`
export WINETRICKS_DOWNLOADER="curl"
export USER_CONF="${PORT_WINE_PATH}/data/user.conf"
check_user_conf

if [ -z "${INSTALLING_PORT}" ] ; then
    . "${USER_CONF}"
    pw_port_update
    pw_download_libs
    pw_check_and_download_wine ${PW_PROTON_STEAM_VER}
    pw_check_and_download_plugins
    pw_init_db
    . "${USER_CONF}"
fi
